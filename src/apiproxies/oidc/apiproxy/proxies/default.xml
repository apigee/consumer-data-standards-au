<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <DefaultFaultRule name="DefaultFaultRule">
        <Step>
            <FaultRules/>
            <Name>AM-Add-CORS-Headers</Name>
        </Step>
        <Step>
            <FaultRules/>
            <Name>FC-CollectPerformanceSLO</Name>
        </Step>
        <AlwaysEnforce>true</AlwaysEnforce>
    </DefaultFaultRule>
    <Description/>
    <FaultRules>
        <FaultRule name="Invalid Refresh Token in Introspection">
            <Condition>(faultType = "invalid_refresh_token") and (proxy.pathsuffix MatchesPath "/introspect")</Condition>
            <Step>
                <FaultRules/>
                <Name>AM-BuildIntrospectionResponseInactiveToken</Name>
            </Step>
        </FaultRule>
        <FaultRule name="Invalid Auth Code">
            <Condition>(fault.name = "invalid_request-authorization_code_invalid")</Condition>
            <Step>
                <FaultRules/>
                <Name>AM-InvalidAuthCode</Name>
            </Step>
        </FaultRule>
    </FaultRules>
    <Flows>
        <Flow name="Get OIDC Configuration">
            <Description/>
            <Request/>
            <Response>
                <Step>
                    <Name>AssignWellKnownConfigurationResponse</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/.well-known/openid-configuration") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Authorise">
            <Description>Get Authorisation Code</Description>
            <Request>
                <Step>
                    <Name>ExtractAuthorizeParams</Name>
                </Step>
                <Step>
                    <Name>FormStateCacheValue</Name>
                </Step>
                <Step>
                    <Name>PopulateStateCache</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>ReadApigeeOIDCCreds</Name>
                </Step>
                <Step>
                    <Name>SetLocationHeader</Name>
                </Step>
                <Step>
                    <Name>RedirectToOkta</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/authorise") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Callback">
            <Description>Callback</Description>
            <Request>
                <Step>
                    <Name>ExtractCallbackParams</Name>
                </Step>
                <Step>
                    <Name>LookupStateCache</Name>
                </Step>
                <Step>
                    <Name>ExtractStateCache</Name>
                </Step>
                <Step>
                    <Name>GenerateOpaqueAuthCodeAndIDToken</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/callback") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="Refresh Token">
            <Description>Refresh Token</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>EV-ExtractRefreshTokenFromRefreshTokenFormParam</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OAInfo-RetrieveRefreshTokenDetails</Name>
                </Step>
                <Step>
                    <Condition>(oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true) or (oauthv2refreshtoken.OAInfo-RetrieveRefreshTokenDetails.refresh_token_status != "approved")</Condition>
                    <FaultRules/>
                    <Name>RF-InvalidRefreshToken</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>AM-GetCDRArrangementIdFromRefreshToken</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>FC-TrafficThresholdsWhenRefreshTokenIsPresent</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>EV-StoreTokenRequestDetails</Name>
                </Step>
                <Step>
                    <Name>ReadApigeeOIDCCreds</Name>
                </Step>
                <Step>
                    <Name>ServiceCalloutIDPTokenEndpointRefreshToken</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <FaultRules/>
                    <Name>EV-GetInfoReqdForIssuingAccessToken</Name>
                </Step>
                <Step>
                    <Name>Decode-OIDC-ID-Token</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>JS-GetOIDCTokenExpiryTime</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OA-RefreshOpaqueAccessToken</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OAInfoSet-ForceUpdateOfAttributes</Name>
                </Step>
                <Step>
                    <Name>GetJWTSigningKey</Name>
                </Step>
                <Step>
                    <Name>AssignIssuer</Name>
                </Step>
                <!--<Step>
                    <Name>GenerateATHashRefreshTokenFlow</Name>
                </Step>-->
                <Step>
                    <Name>GenerateATHashRefreshTokenFlowHostedTarget</Name>
                </Step>
                <Step>
                    <Name>ExtractATHash</Name>
                </Step>
                <Step>
                    <Name>ExtractAMRClaim</Name>
                </Step>
                <Step>
                    <Name>GenerateIDTokenRefreshTokenFlow</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>JS-SubstituteWithOpaqueAccessTokenInResponse</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST") and (request.formparam.grant_type = "refresh_token")</Condition>
        </Flow>
        <Flow name="Acquire Token - Auth Code">
            <Description>Acquire Token Authorization Code Grant Type</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>OAInfo-RetrieveOIDCAuthCode</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>EV-StoreTokenRequestDetails</Name>
                </Step>
                <Step>
                    <Name>RF-InvalidRedirectUri</Name>
                    <Condition>(TokenRequestParams.redirect_uri != oauthv2authcode.OAInfo-RetrieveOIDCAuthCode.redirect_uri)</Condition>
                </Step>
                <Step>
                    <Name>ReadApigeeOIDCCreds</Name>
                </Step>
                <Step>
                    <Name>ServiceCalloutIDPTokenendpoint</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <FaultRules/>
                    <Name>EV-GetInfoReqdForIssuingAccessToken</Name>
                </Step>
                <Step>
                    <Name>Decode-OIDC-ID-Token</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>JS-GetOIDCTokenExpiryTime</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>AM-GenerateCDRArrangementId</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OA-IssueOpaqueAccessToken</Name>
                </Step>
                <Step>
                    <Name>GetJWTSigningKey</Name>
                </Step>
                <Step>
                    <Name>AssignIssuer</Name>
                </Step>
                <!--<Step>
                    <Name>GenerateATHash</Name>
                </Step>-->
                <Step>
                    <Name>GenerateATHashHostedTarget</Name>
                </Step>
                <Step>
                    <Name>ExtractATHash</Name>
                </Step>
                <Step>
                    <Name>ExtractAMRClaim</Name>
                </Step>
                <Step>
                    <Name>GenerateIDToken</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>JS-SubstituteWithOpaqueAccessTokenInResponse</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST") and (request.formparam.grant_type = "authorization_code")</Condition>
        </Flow>
        <Flow name="Acquire Token - Client Cred">
            <Description>Acquire Token Client Credentials Grant Type</Description>
            <Request>
                <Step>
                    <Condition>(request.formparam.scope != "cdr:registration")</Condition>
                    <FaultRules/>
                    <Name>RF-InvalidScope</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OA-IssueAccessTokenClientCreds</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <FaultRules/>
                    <Name>AM-SetAccessTokenResponse-ClientCred</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST") and (request.formparam.grant_type = "client_credentials")</Condition>
        </Flow>
        <Flow name="Revoke Token">
            <Description>Get Token Info</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>EV-ExtractRefreshTokenFromTokenFormParam</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OAInfo-RetrieveRefreshTokenDetails</Name>
                </Step>
                <Step>
                    <Name>ReadApigeeOIDCCreds</Name>
                </Step>
                <Step>
                    <Name>AM-RemovePrivateKeyJWTParams</Name>
                </Step>
                <Step>
                    <Name>SetIDPAuthorizationHeader</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = false</Condition>
                    <FaultRules/>
                    <Name>OA-RevokeRefreshToken</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = false</Condition>
                    <FaultRules/>
                    <Name>AM-SetCustomDimensionsForExpireTokenWhenRefreshTokenProvided</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = false</Condition>
                    <FaultRules/>
                    <Name>AM-ReplaceRefreshTokenInRequestSentToOIDCProvider</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true</Condition>
                    <FaultRules/>
                    <Name>AM-SetRefreshTokenAsAccessToken</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true</Condition>
                    <FaultRules/>
                    <Name>OAInfo-RetrieveAccessTokenDetails</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true</Condition>
                    <FaultRules/>
                    <Name>AM-SetCustomDimensionsForExpireTokenWhenAccessTokenProvided</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true</Condition>
                    <FaultRules/>
                    <Name>OA-RevokeAccessToken</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true</Condition>
                    <FaultRules/>
                    <Name>AM-ReplaceAccessTokenInRequestSentToOIDCProvider</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/token/revocation") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="Token Introspection">
            <Description>Get Token Info</Description>
            <Request>
                <Step>
                    <Condition>(request.formparam.token_type_hint !="") and (request.formparam.token_type_hint !="refresh_token")</Condition>
                    <FaultRules/>
                    <Name>RF-UnsupportedTokenType</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>EV-ExtractRefreshTokenFromTokenFormParam</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OAInfo-RetrieveRefreshTokenDetails</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true</Condition>
                    <FaultRules/>
                    <Name>RF-InvalidRefreshToken</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>AM-GetCDRArrangementIdFromRefreshToken</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>FC-TrafficThresholdsWhenRefreshTokenIsPresent</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>SetTokenIntrospectionResponse</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>AM-GenerateIntrospectionResponse</Name>
                    <Condition>(isActive = true)</Condition>
                </Step>
                <Step>
                    <Name>AM-GenerateIntrospectionResponseInactive</Name>
                    <Condition>(isActive = false)</Condition>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/token/introspection") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="Userinfo">
            <Description>Get Userinfo</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>EV-ExtractAccessTokenFromAuthHdr</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OAInfo-RetrieveAccessTokenDetails</Name>
                </Step>
                <Step>
                    <Condition>(oauthV2.OAInfo-RetrieveAccessTokenDetails.failed = "true") or (oauthv2accesstoken.OAInfo-RetrieveAccessTokenDetails.status != "approved")</Condition>
                    <FaultRules/>
                    <Name>RF-InvalidAccessToken</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>AM-ReplaceAccessTokenInAuthHdrInRequestSentToOIDCProvider</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>ReplaceUserInfoSubWithPPID</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/me") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Get OIDC Public Certs">
            <Description>Get OIDC Public Certs</Description>
            <Request/>
            <Response>
                <Step>
                    <Name>GetJWTKeys</Name>
                </Step>
                <Step>
                    <Name>AssignJWKS</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/certs") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Not Found">
            <Description>Not Found</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>RF-NotFound</Name>
                </Step>
            </Request>
            <Response/>
        </Flow>
    </Flows>
    <PostFlow name="PostFlow">
        <Request/>
        <Response>
            <Step>
                <FaultRules/>
                <Name>FC-CollectPerformanceSLO</Name>
            </Step>
        </Response>
    </PostFlow>
    <PreFlow name="PreFlow">
        <Request>
            <Step>
                <FaultRules/>
                <Name>AM-SetDefaultValuesForPerfSLO</Name>
            </Step>
            <Step>
                <FaultRules/>
                <Name>FC-DecideIfCustomerIsPresent</Name>
            </Step>
            <Step>
                <FaultRules/>
                <Name>FC-GeneralTrafficThresholdsForAuthEndpoints</Name>
            </Step>
            <Step>
                <FaultRules/>
                <Name>AM-SetDefaultValuesForTokenCustomDimensions</Name>
            </Step>
            <Step>
                <Condition>(request.formparam.client_assertion_type = "urn:ietf:params:oauth:client-assertion-type:jwt-bearer" ) and (request.formparam.client_assertion != "") and (request.formparam.client_id != "")</Condition>
                <FaultRules/>
                <Name>FC-AuthenticateWithPrivateKeyJWT</Name>
            </Step>
        </Request>
        <Response>
            <Step>
                <FaultRules/>
                <Name>AM-Add-CORS-Headers</Name>
            </Step>
        </Response>
    </PreFlow>
    <HTTPProxyConnection>
        <BasePath>/</BasePath>
        <Properties/>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="noroute">
        <Condition>((proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST")) or ((proxy.pathsuffix MatchesPath "/authorise") and (request.verb = "GET")) or ((proxy.pathsuffix MatchesPath "/certs") and (request.verb = "GET")) or ((proxy.pathsuffix MatchesPath "/token/introspection") and (request.verb = "POST")) or ((proxy.pathsuffix MatchesPath "/.well-known/openid-configuration") and (request.verb = "GET"))</Condition>
    </RouteRule>
    <RouteRule name="callback">
        <Condition>(proxy.pathsuffix MatchesPath "/callback") and (request.verb = "POST")</Condition>
        <TargetEndpoint>callback</TargetEndpoint>
    </RouteRule>
    <RouteRule name="sandbox">
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
</ProxyEndpoint>