<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <DefaultFaultRule name="DefaultFaultRule">
        <Step>
            <FaultRules/>
            <Name>AM-Add-CORS-Headers</Name>
        </Step>
        <AlwaysEnforce>true</AlwaysEnforce>
    </DefaultFaultRule>
    <Description/>
    <FaultRules>
        <FaultRule name="Invalid Refresh Token in Introspection">
            <Condition>(faultType = "invalid_refresh_token") and (proxy.pathsuffix MatchesPath "/token/introspection")</Condition>
            <Step>
                <FaultRules/>
                <Name>AM-BuildIntrospectionResponseInactiveToken</Name>
            </Step>
        </FaultRule>
        <FaultRule name="Invalid Auth Code">
            <Condition>(fault.name = "invalid_request-authorization_code_invalid")</Condition>
            <Step>
                <FaultRules/>
                <Name>AM-InvalidAuthCode</Name>
            </Step>
        </FaultRule>
        <FaultRule name="Cannot issue access token">
            <Condition>(fault.name = "invalid_request")</Condition>
            <Step>
                <FaultRules/>
                <Name>AM-CannotIssueAccessToken</Name>
            </Step>
        </FaultRule>
        <FaultRule name="SC to IDP failed">
            <Description>Issues when invoking IDP via a service callout</Description>
            <Condition>(fault.name = "ExecutionFailed") and ( (servicecallout.SC-GetOIDCTokenHash.failed = "true") or (servicecallout.SC-InvokeIdPRefreshTokenEndpoint.failed = "true") or (servicecallout.SC-InvokeIdPTokenEndpoint.failed = "true") )</Condition>
            <Step>
                <FaultRules/>
                <Name>AM-IDPError</Name>
            </Step>
        </FaultRule>
        <FaultRule name="SC to Consent failed">
            <Description>Issues when invoking consent management via a service callout</Description>
            <Condition>(fault.name = "ExecutionFailed") and ( (servicecallout.SC-CreateUpdateCDRArrangement.failed = "true") or (servicecallout.SC-RevokeCDRArrangement.failed = "true") or (servicecallout.SC-VerifyExistingConsentId.failed = "true") )</Condition>
            <Step>
                <FaultRules/>
                <Name>AM-ConsentError</Name>
            </Step>
        </FaultRule>
    </FaultRules>
    <Flows>
        <Flow name="Get OIDC Configuration">
            <Description/>
            <Request>
                <Step>
                    <Name>AM-SetCurrentHostname</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>KVM-GetMTLSHostname</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>JS-RemoveOIDCProvideBasePath</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/.well-known/openid-configuration") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Authorise">
            <Description>Get Authorisation Code</Description>
            <Request>
                <Step>
                    <Name>VAK-VerifyClientId</Name>
                </Step>
                <Step>
                    <Name>RF-InvalidClientId</Name>
                    <Condition>oauthV2.VAK-VerifyClientId.failed = "true"</Condition>
                </Step>
                <Step>
                    <Name>AM-SetStateCacheValue</Name>
                    <Condition>(request.queryparam.request_uri = null) or (request.queryparam.request_uri = "")</Condition>
                </Step>
                <Step>
                    <Name>AM-SetStateAsOIDCCacheKey</Name>
                </Step>
                <Step>
                    <Name>PC-CacheOIDCState</Name>
                </Step>
                <Step>
                    <Name>KVM-GetIDPCredentials</Name>
                </Step>
                <Step>
                    <Name>AM-InsertApigeeOIDCCredentials</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AM-RedirectToMockOIDCAuthorise</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/authorise") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Authorise - Callback">
            <Description>Implements callback to receive authcode from IdP</Description>
            <Request>
                <Step>
                    <Name>EV-GetFormParams</Name>
                </Step>
                <Step>
                    <Name>AM-SetStateAsOIDCCacheKey</Name>
                </Step>
                <Step>
                    <Name>LC-RetrieveCachedOIDCState</Name>
                </Step>
                <Step>
                    <Name>RF-InvalidState</Name>
                    <Condition>lookupcache.LC-RetrieveCachedOIDCState.cachehit = "false"</Condition>
                </Step>
                <Step>
                    <Name>EV-ParseCachedState</Name>
                </Step>
                <Step>
                    <Name>FC-VerifyIdpIdToken</Name>
                </Step>
                <Step>
                    <Name>AM-AppendOIDCAuthCodeIdTokenToOIDCState</Name>
                </Step>
                <Step>
                    <Name>PC-CacheOIDCState</Name>
                </Step>
                <Step>
                    <Name>AM-InsertQueryParamsForRedirectToConsent</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AM-RedirectToConsentFlow</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/authorise-cb")</Condition>
        </Flow>
        <Flow name="Consent - Callback">
            <Description>Handles the response from the Consent Flow</Description>
            <Request>
                <Step>
                    <Name>AM-SetStateAsOIDCCacheKey</Name>
                </Step>
                <Step>
                    <Name>LC-RetrieveCachedOIDCState</Name>
                </Step>
                <Step>
                    <Name>RF-InvalidState</Name>
                    <Condition>lookupcache.LC-RetrieveCachedOIDCState.cachehit = "false"</Condition>
                </Step>
                <Step>
                    <Name>EV-ParseCachedStateWithIdPAuthCodeAndIdToken</Name>
                </Step>
                <Step>
                    <Name>RF-RedirectToClientConsentNotAuthorised</Name>
                    <Condition>request.queryparam.consent-status != "AUTHORIZED_END_USER"</Condition>
                </Step>
                <Step>
                    <Name>FC-VerifyIdpIdToken</Name>
                </Step>
                <Step>
                    <Name>JS-CalculateExpiryTimeForNewIdToken-AuthCodeStage</Name>
                </Step>
                <Step>
                    <Name>FC-GetPPId</Name>
                </Step>
                <Step>
                    <Name>AM-SetRefreshTokenExpiryTimeBasedOnConsent</Name>
                </Step>
                <Step>
                    <Name>OA-IssueOpaqueAuthCode</Name>
                </Step>
                <Step>
                    <Name>AM-SetIssuer</Name>
                </Step>
                <Step>
                    <Name>SC-GetOIDCTokenHash</Name>
                </Step>
                <Step>
                    <Name>KVM-GetJWTSigningKeys</Name>
                </Step>
                <Step>
                    <Name>JWT-GenerateIdTokenForAuthCodeStep</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AM-RedirectToClient</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/consent-cb") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Acquire Token - Auth Code">
            <Description>Acquire Token Authorization Code Grant Type</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>EV-StoreTokenRequestDetails</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OAInfo-RetrieveOIDCAuthCode</Name>
                </Step>
                <Step>
                    <Name>RF-InvalidRedirectURI</Name>
                    <Condition>request.formparam.redirect_uri != oauthv2authcode.OAInfo-RetrieveOIDCAuthCode.redirect_uri</Condition>
                </Step>
                <Step>
                    <Name>KVM-GetIDPCredentials</Name>
                </Step>
                <Step>
                    <Name>BA-SetBasicAuthHeader</Name>
                </Step>
                <Step>
                    <Name>SC-InvokeIdPTokenEndpoint</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>EV-GetInfoReqdForIssuingAccessToken</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>JWT-DecodeOIDCIdToken</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>JS-GetOIDCTokenExpiryTime</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OA-IssueOpaqueAccessToken</Name>
                </Step>
                <Step>
                    <Name>AM-SetIssuer</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>JS-GetInfoFromOAuth2Policy</Name>
                </Step>
                <Step>
                    <Name>SC-GetOIDCTokenHash</Name>
                </Step>
                <Step>
                    <Name>KVM-GetJWTSigningKeys</Name>
                </Step>
                <Step>
                    <Name>JWT-GenerateIdTokenForTokenIssueOrRefreshStep</Name>
                </Step>
                <Step>
                    <Name>AM-SetConsentIdFromToken</Name>
                </Step>
                <Step>
                    <Name>AM-SetRefreshTokenExpiryDate</Name>
                </Step>
                <Step>
                    <Name>KVM-GetConsentManagementApiKey</Name>
                </Step>
                <Step>
                    <Name>SC-CreateUpdateCDRArrangement</Name>
                </Step>
                <Step>
                    <Name>FC-ManageTokensAssociatedWithConsentId-IssueToken</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AM-SetIssueOrRefreshTokenResponse</Name>
                    <!--<Condition>oauthv2authcode.OAInfo-RetrieveOIDCAuthCode.requestedSharingDuration &gt; 0</Condition>-->
                </Step>
                <!--<Step>-->
                <!--    <Name>AM-SetIssueTokenResponseWithNoRefreshToken</Name>-->
                <!--    <Condition>(oauthv2authcode.OAInfo-RetrieveOIDCAuthCode.requestedSharingDuration = "") or (oauthv2authcode.OAInfo-RetrieveOIDCAuthCode.requestedSharingDuration = 0)</Condition>-->
                <!--</Step>-->
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST") and (request.formparam.grant_type = "authorization_code")</Condition>
        </Flow>
        <Flow name="Acquire Token - Client Cred">
            <Description>Acquire Token Client Credentials Grant Type</Description>
            <Request>
                <Step>
                    <Name>RF-InvalidScope</Name>
                    <Condition>(request.formparam.scope != "consents")</Condition>
                </Step>
                <Step>
                    <Name>OA-IssueAccessTokenClientCreds</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AM-SetAccessTokenResponse-ClientCred</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST") and (request.formparam.grant_type = "client_credentials")</Condition>
        </Flow>
        <Flow name="Refresh Token">
            <Description>Refresh Token</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>EV-ExtractRefreshTokenFromRefreshTokenFormParam</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OAInfo-RetrieveRefreshTokenDetails</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true</Condition>
                    <Name>RF-InvalidRefreshToken</Name>
                </Step>
                <Step>
                    <Name>AM-GetCDRArrangementIdFromRefreshToken</Name>
                </Step>
                <Step>
                    <Name>KVM-GetConsentManagementApiKey</Name>
                </Step>
                <Step>
                    <Name>SC-VerifyExistingCDRArrangmentId</Name>
                </Step>
                <Step>
                    <Name>AM-DebugAddCalloutResponse</Name>
                </Step>
                <Step>
                    <Name>EV-ExtractConsentCheckResult</Name>
                </Step>
                <Step>
                    <Name>RF-InvalidConsent</Name>
                    <Condition>(consentInfo.checkStatus != "true") or (consentInfo.clientId != oauthv2refreshtoken.OAInfo-RetrieveRefreshTokenDetails.client_id) or (consentInfo.state != "LIVE")</Condition>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>EV-StoreTokenRequestDetails</Name>
                </Step>
                <Step>
                    <Name>KVM-GetIDPCredentials</Name>
                </Step>
                <Step>
                    <Name>BA-SetBasicAuthHeader</Name>
                </Step>
                <Step>
                    <Name>SC-InvokeIdPRefreshTokenEndpoint</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>EV-GetInfoReqdForIssuingAccessToken</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>JWT-DecodeOIDCIdToken</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>JS-GetOIDCTokenExpiryTime</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OA-RefreshOpaqueAccessToken</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OAInfoSet-ForceUpdateOfAttributes</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>JS-GetInfoFromOAuth2Policy</Name>
                </Step>
                <Step>
                    <Name>AM-SetIssuer</Name>
                </Step>
                <Step>
                    <Name>SC-GetOIDCTokenHash</Name>
                </Step>
                <Step>
                    <Name>KVM-GetJWTSigningKeys</Name>
                </Step>
                <Step>
                    <Name>JWT-GenerateIdTokenForTokenIssueOrRefreshStep</Name>
                </Step>
                <Step>
                    <Name>AM-SetRefreshTokenExpiryDate</Name>
                </Step>
                <Step>
                    <Name>SC-CreateUpdateCDRArrangement</Name>
                </Step>
                <Step>
                    <Name>FC-ManageTokensAssociatedWithConsentId-RefreshToken</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AM-SetIssueOrRefreshTokenResponse</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST") and (request.formparam.grant_type = "refresh_token")</Condition>
        </Flow>
        <Flow name="Revoke Token">
            <Description>Get Token Info</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>EV-ExtractRefreshTokenFromTokenFormParam</Name>
                </Step>
                <Step>
                    <Name>KVM-GetIDPCredentials</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OAInfo-RetrieveRefreshTokenDetails</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = false</Condition>
                    <FaultRules/>
                    <Name>OA-RevokeRefreshToken</Name>
                </Step>
                <Step>
                    <Name>BA-SetBasicAuthHeader</Name>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = false</Condition>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = false</Condition>
                    <FaultRules/>
                    <Name>AM-ReplaceRefreshTokenInRequestSentToOIDCProvider</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true</Condition>
                    <FaultRules/>
                    <Name>AM-SetRefreshTokenAsAccessToken</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true</Condition>
                    <FaultRules/>
                    <Name>OAInfo-RetrieveAccessTokenDetails</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true</Condition>
                    <FaultRules/>
                    <Name>OA-RevokeAccessToken</Name>
                </Step>
                <Step>
                    <Name>BA-SetBasicAuthHeader</Name>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true</Condition>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true and oauthV2.OAInfo-RetrieveAccessTokenDetails.failed = false</Condition>
                    <FaultRules/>
                    <Name>AM-ReplaceAccessTokenInRequestSentToOIDCProvider</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/token/revocation") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="Token Introspection">
            <Description>Get Token Info</Description>
            <Request>
                <Step>
                    <Condition>(request.formparam.token_type_hint !="") and (request.formparam.token_type_hint !="refresh_token")</Condition>
                    <FaultRules/>
                    <Name>RF-UnsupportedTokenType</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>EV-ExtractRefreshTokenFromTokenFormParam</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OAInfo-RetrieveRefreshTokenDetails</Name>
                </Step>
                <Step>
                    <Name>AM-GetCDRArrangementIdFromRefreshToken</Name>
                </Step>
                <Step>
                    <Condition>oauthV2.OAInfo-RetrieveRefreshTokenDetails.failed = true</Condition>
                    <FaultRules/>
                    <Name>RF-InvalidRefreshToken</Name>
                </Step>
                <Step>
                    <Name>KVM-GetIDPCredentials</Name>
                </Step>
                <Step>
                    <Name>BA-SetBasicAuthHeader</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>AM-ReplaceRefreshTokenInRequestSentToOIDCProvider</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>EV-ExtractIntrospectionResponse</Name>
                </Step>
                <Step>
                    <Name>AM-GenerateIntrospectionResponse</Name>
                    <Condition>isActive = "true"</Condition>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/token/introspection") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="Userinfo">
            <Description>Get Userinfo</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>EV-ExtractAccessTokenFromAuthHdr</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>OAInfo-RetrieveAccessTokenDetails</Name>
                </Step>
                <Step>
                    <Condition>(oauthV2.OAInfo-RetrieveAccessTokenDetails.failed = "true")</Condition>
                    <FaultRules/>
                    <Name>RF-InvalidAccessToken</Name>
                </Step>
                <Step>
                    <Name>AM-SetJWTTokenToDecode</Name>
                </Step>
                <Step>
                    <Name>JWT-DecodeOIDCIdToken</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AM-SetUserInfoResponse</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/me") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Get OIDC Public Certs">
            <Description>Get OIDC Public Certs</Description>
            <Request>
                <Step>
                    <Name>KVM-GetJWTSigningKeys</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AM-SetJWKSResponse</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/jwks") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Revoke Tokens Bound to Arrangement">
            <Description>Private endpoint to be used by Consent Management solution when a consent is revoked out of bounds (via a different channel)</Description>
            <Request>
                <Step>
                    <Name>EV-ExtractConsentIdFromURIParam</Name>
                </Step>
                <Step>
                    <Name>FC-ManageTokensAssociatedWithConsentId-RevokeArrangment</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AM-SetResponse204NoContent</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/consents/{theConsentId}/tokens") and (request.verb = "DELETE")</Condition>
        </Flow>
        <Flow name="Not Found">
            <Description>Not Found</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>RF-NotFound</Name>
                </Step>
            </Request>
            <Response/>
        </Flow>
    </Flows>
    <PostFlow name="PostFlow">
        <Request/>
        <Response/>
    </PostFlow>
    <PreFlow name="PreFlow">
        <Request>
            <!-- Do not count internal proxy chain calls for traffic thresholds -->
            <Step>
                <Name>AM-SetClientIdAndPrivKeyJwt</Name>
            </Step>
            <!-- If Private Key JWT request is included. Applicable for instance to client credentials flow or par endpoint-->
            <!-- If request object passed by value  -->
        </Request>
        <Response>
            <Step>
                <FaultRules/>
                <Name>AM-Add-CORS-Headers</Name>
            </Step>
        </Response>
    </PreFlow>
    <HTTPProxyConnection>
        <BasePath>/</BasePath>
        <Properties/>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="noroute-par">
        <Condition>(proxy.pathsuffix MatchesPath "/par") and (request.verb = "POST")</Condition>
    </RouteRule>
    <RouteRule name="noroute-token">
        <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST")</Condition>
    </RouteRule>
    <RouteRule name="noroute-jwks">
        <Condition>(proxy.pathsuffix MatchesPath "/jwks") and (request.verb = "GET")</Condition>
    </RouteRule>
    <RouteRule name="noroute-authorise-cb">
        <Condition>(proxy.pathsuffix MatchesPath "/authorise-cb")</Condition>
    </RouteRule>
    <RouteRule name="noroute-consent-cb">
        <Condition>(proxy.pathsuffix MatchesPath "/consent-cb")</Condition>
    </RouteRule>
    <RouteRule name="noroute-authorise">
        <Condition>(proxy.pathsuffix MatchesPath "/authorise")</Condition>
    </RouteRule>
    <RouteRule name="noroute-userinfo">
        <Condition>(proxy.pathsuffix MatchesPath "/me")</Condition>
    </RouteRule>
    <RouteRule name="noroute-arrangement-revoke-tokens-associated-with-consent">
        <Condition>(proxy.pathsuffix MatchesPath "/consents/{theConsentId}/tokens")</Condition>
    </RouteRule>
    <RouteRule name="mock-oidc">
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
</ProxyEndpoint>