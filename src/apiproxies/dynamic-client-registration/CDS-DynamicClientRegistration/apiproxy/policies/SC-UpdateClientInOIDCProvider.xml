<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ServiceCallout async="false" continueOnError="false" enabled="true" name="SC-UpdateClientInOIDCProvider">
    <DisplayName>SC-UpdateClientInOIDCProvider</DisplayName>
    <Request>
        <IgnoreUnresolvedVariables>false</IgnoreUnresolvedVariables>
        <Set>
            <Verb>PUT</Verb>
            <Headers>
                <Header name="Authorization">Bearer {app.IDP_registration_access_token}</Header>
            </Headers>
            <Payload contentType="application/json">{
   "client_id": "{theClientId}",
   "client_secret": "{theExistingAppSecret}",
   "redirect_uris":["{redirectURIInRequest}"],
    "grant_types":[
      "client_credentials",
      "authorization_code",
      "implicit"
   ],
   "response_modes": [
      "form_post"
    ],
   "response_types":["code id_token"],
   "application_type": "web",
   "id_token_signed_response_alg": "{jwt.JWT-DecodeJWTInRequestBody.decoded.claim.id_token_signed_response_alg}" ,
   "require_auth_time": false,
   "subject_type": "pairwise",
   "token_endpoint_auth_method": "{jwt.JWT-DecodeJWTInRequestBody.decoded.claim.token_endpoint_auth_method}",
   "request_uris": [],
   "introspection_endpoint_auth_method": "client_secret_basic",
   "revocation_endpoint_auth_method": "client_secret_basic",
   "jwks_uri": "{ADRDetailsFromSSA.jwks_uri}"
}
</Payload>
        </Set>
    </Request>
    <Response>OIDCProviderResponse</Response>
    <LocalTargetConnection>
        <Properties>
            <!-- Ignore any errors in OIDC Provider. The client in Mock OIDC provider is transient anyway -->
            <Property name="success.codes">1xx,2xx,3xx,404,5xx</Property>
        </Properties>
        <Path>/mock-oidc/register/{theClientId}</Path>
    </LocalTargetConnection>
</ServiceCallout>