{
	"info": {
		"_postman_id": "66cf0641-c866-45cd-8b1b-73cb53f54576",
		"name": "OpenBankingAUNZ",
		"description": "Test Collection for OpenBanking APIs (AU)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "OIDC - Authorise/Obtain Token (Hybrid Flow) - Basic Auth",
			"item": [
				{
					"name": "OIDC Authorise - Step 1 (Hybrid) - /authorise",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store html interaction  and uuid to use in subsequent calls",
									"",
									"var html = cheerio(responseBody);",
									"var nextInteraction1 = html.find('#loginForm').attr('action');",
									"var uuid = html.find('#uuid').attr('value');",
									"var acr = html.find('#acr').attr('value');",
									"",
									"pm.environment.set(\"nextInteraction1\", nextInteraction1);",
									"pm.environment.set(\"uuid\", uuid);",
									"pm.environment.set(\"acr\", acr);",
									"",
									"// If the auth code had already been issued and was still valid, this",
									"// invocation would directly return it (no necessary login)",
									"// if that's the case, store the resulting auth_code ",
									"",
									"const htmlResponse = cheerio(responseBody);",
									"var temp_auth_code = html.find('[name=\"code\"]').val();",
									"var temp_id_token = html.find('[name=\"id_token\"]').val();",
									"var temp_state = html.find('[name=\"state\"]').val();",
									"const $ = cheerio.load(responseBody);",
									"var temp_cb_uri = $('form').attr('action');",
									"pm.environment.set(\"temp_auth_code\", temp_auth_code);",
									"pm.environment.set(\"temp_id_token\", temp_id_token);",
									"pm.environment.set(\"temp_state\", temp_state);",
									"pm.environment.set(\"temp_cb_uri\", temp_cb_uri);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/authorise?client_id={{client_id}}&redirect_uri={{client_redirect_uri}}&response_type=code%20id_token&scope=openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read&state=af0ifjsldklaaa&nonce=n-0S6_WzA2Mj223&sharing_duration=1800",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"authorise"
							],
							"query": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"description": "If you want to change this value, always do it by altering the corresponding env variable. IMPORTANT: This client_id, as well as its redirect uri and public key needs to be registered with the OIDC provider included in the reference implementation (Manual edit of client configuration file)"
								},
								{
									"key": "redirect_uri",
									"value": "{{client_redirect_uri}}",
									"description": "If you want to change this value, always do it by altering the corresponding env variable"
								},
								{
									"key": "response_type",
									"value": "code%20id_token"
								},
								{
									"key": "scope",
									"value": "openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read",
									"description": "Add the required scopes, separated by %20"
								},
								{
									"key": "state",
									"value": "af0ifjsldklaaa",
									"description": "For test purposes, any string will do"
								},
								{
									"key": "nonce",
									"value": "n-0S6_WzA2Mj223",
									"description": "For test purposes, any string will do"
								},
								{
									"key": "max_age",
									"value": "600",
									"disabled": true
								},
								{
									"key": "acr_values",
									"value": "urn:cds.au:cdr:3",
									"description": "One of the valid authentication types the OIDC provider accepts",
									"disabled": true
								},
								{
									"key": "response_mode",
									"value": "form_post",
									"description": "This response mode allows automation in Postman in the Step to get the authorisation code",
									"disabled": true
								},
								{
									"key": "jti",
									"value": "37747cd1-c105-4569-9f75-4adf28b73e32",
									"description": "For test purposes, any jti will do",
									"disabled": true
								},
								{
									"key": "exp",
									"value": "1596692638",
									"description": "Epoch timestamp. Any value in the future will work",
									"disabled": true
								},
								{
									"key": "sharing_duration",
									"value": "1800",
									"description": "How long the refresh token should live for (In seconds)"
								},
								{
									"key": "cdr_arrangement_id",
									"value": "{{cdr_arrangement_id}}",
									"description": "Optionally use an existing consent (arrangement)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Authorise - Step 2 (Hybrid) - Submit login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store html interaction  and uuid to use in subsequent calls",
									"",
									"var html = cheerio(responseBody);",
									"var nextInteraction2 = html.find('#consentForm').attr('action');",
									"var uuid = html.find('#uuid').attr('value');",
									"var acr = html.find('#acr').attr('value');",
									"var account = html.find('#account').attr('value');",
									"var consentResponse = html.find('#consent').attr('value');",
									"",
									"pm.environment.set(\"nextInteraction2\", nextInteraction2);",
									"pm.environment.set(\"uuid\", uuid);",
									"pm.environment.set(\"acr\", acr);",
									"pm.environment.set(\"account\", account);",
									"pm.environment.set(\"consentResponse\", consentResponse);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{uuid}}",
									"type": "text"
								},
								{
									"key": "login",
									"value": "10203040",
									"type": "text"
								},
								{
									"key": "password",
									"value": "anyPasswordWillDo",
									"type": "text"
								},
								{
									"key": "acr",
									"value": "{{acr}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net{{nextInteraction1}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net{{nextInteraction1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Authorise - Step 3 (Hybrid) - Submit consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store callback response from IdP to use in subsequent call",
									"",
									"const htmlResponse = cheerio(responseBody);",
									"var temp_auth_code = htmlResponse.find('[name=\"code\"]').val();",
									"var temp_id_token = htmlResponse.find('[name=\"id_token\"]').val();",
									"var temp_state = htmlResponse.find('[name=\"state\"]').val();",
									"const $ = cheerio.load(responseBody);",
									"var temp_cb_uri = $('form').attr('action');",
									"pm.environment.set(\"temp_auth_code\", temp_auth_code);",
									"pm.environment.set(\"temp_id_token\", temp_id_token);",
									"pm.environment.set(\"temp_state\", temp_state);",
									"pm.environment.set(\"temp_cb_uri\", temp_cb_uri);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{uuid}}",
									"type": "text"
								},
								{
									"key": "account",
									"value": "{{account}}",
									"type": "text"
								},
								{
									"key": "acr",
									"value": "{{acr}}",
									"type": "text"
								},
								{
									"key": "bank:accounts.basic:read",
									"value": "bank:accounts.basic:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text"
								},
								{
									"key": "bank:accounts.detail:read",
									"value": "bank:accounts.detail:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text"
								},
								{
									"key": "bank:transactions:read",
									"value": "bank:transactions:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text"
								},
								{
									"key": "bank:payees:read",
									"value": "bank:payees:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "bank:regular_payments:read",
									"value": "bank:regular_payments:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "common:customer.basic:read",
									"value": "common:customer.basic:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "common:customer.detail:read",
									"value": "common:customer.detail:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net{{nextInteraction2}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net{{nextInteraction2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Authorise - Step 3.5 (Hybrid)  - Follow redirect to obtain auth code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store authorisation code to use in subsequent calls",
									"",
									"const html_response = cheerio(responseBody);",
									"var auth_code = html_response.find('[name=\"code\"]').val();",
									"",
									"pm.environment.set(\"auth_code\", auth_code);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code",
									"value": "{{temp_auth_code}}",
									"type": "text"
								},
								{
									"key": "id_token",
									"value": "{{temp_id_token}}",
									"type": "text"
								},
								{
									"key": "state",
									"value": "{{temp_state}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{temp_cb_uri}}",
							"host": [
								"{{temp_cb_uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Acquire Token - Step 4 (Hybrid) - Basic Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store scope, access token and id token to reuse in subsequent calls",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"access_token\", jsonData.access_token);",
									"pm.environment.set(\"id_token\", jsonData.id_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"pm.environment.set(\"scope\", jsonData.scope);",
									"pm.environment.set(\"cdr_arrangement_id\", jsonData.cdr_arrangement_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{auth_code}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{client_redirect_uri}}",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/token",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				}
			],
			"description": "These 4 requests automate the steps of obtaining an authorisation code by navigating through the mock login and consent screens and obtaining a token using the authorisation code\n Use this approach when testing a client that has been added during the initial setup, as those client are persisted in the mock oidc provider and have been defined as accepting basic client auth.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "OIDC - Authorise/Obtain Token (HF) - PAR",
			"item": [
				{
					"name": "Steo 0 - Generate PAR request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store PAR jwt to reuse in next call",
									"pm.environment.set(\"par_jwt\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/mock-adr-client/parrequest?aud=https://{{org}}-{{env}}.apigee.net&client_id={{client_id}}&state=af0ifjsldkl&scope=openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read&redirect_uri={{client_redirect_uri}}&nonce=n-0S6_WzA2Mj32&sharing_duration=1800",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"mock-adr-client",
								"parrequest"
							],
							"query": [
								{
									"key": "aud",
									"value": "https://{{org}}-{{env}}.apigee.net"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "state",
									"value": "af0ifjsldkl"
								},
								{
									"key": "scope",
									"value": "openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read"
								},
								{
									"key": "redirect_uri",
									"value": "{{client_redirect_uri}}"
								},
								{
									"key": "nonce",
									"value": "n-0S6_WzA2Mj32"
								},
								{
									"key": "sharing_duration",
									"value": "1800"
								},
								{
									"key": "cdr_arrangement_id",
									"value": "{{cdr_arrangement_id}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Authorise - Step 0 (Hybrid) - /par",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store the returned URI to reuse in subsequent calls",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"PAR_request_uri\", jsonData.request_uri);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Build JWT request based on params, and add to \"request\" param",
									"",
									"CryptoJS = require(\"crypto-js\");",
									"",
									"function base64url(source) {",
									"\t// Encode in classical base64",
									"\tencodedSource = CryptoJS.enc.Base64.stringify(source);",
									"",
									"\t// Remove padding equal characters",
									"\tencodedSource = encodedSource.replace(/=+$/, '');",
									"",
									"\t// Replace characters according to base64url specifications",
									"\tencodedSource = encodedSource.replace(/\\+/g, '-');",
									"\tencodedSource = encodedSource.replace(/\\//g, '_');",
									"",
									"\treturn encodedSource;",
									"}",
									"",
									"jwt_header = {};",
									"jwt_header.alg = \"RS256\";",
									"jwt_header.typ = \"JWT\";",
									"jwt_header.kid = pm.environment.get(\"client_public_key_kid\");",
									"",
									"console.log(\"jwt_header\",jwt_header);",
									"",
									"jwt_body = {};",
									"jwt_body.iss = pm.environment.get(\"client_id\");",
									"jwt_body.client_id = pm.environment.get(\"client_id\");",
									"jwt_body.sub = pm.environment.get(\"client_id\");",
									"jwt_body.aud = pm.environment.get(\"api_endpoint\");",
									"jwt_body.jti = pm.request.url.query.get(\"jti\");",
									"jwt_body.exp = Number(pm.request.url.query.get(\"exp\"));",
									"jwt_body.response_type = decodeURI(pm.request.url.query.get(\"response_type\"));",
									"jwt_body.redirect_uri = pm.environment.get(\"client_redirect_uri\");",
									"jwt_body.scope = decodeURI(pm.request.url.query.get(\"scope\"));",
									"jwt_body.state = pm.request.url.query.get(\"state\");",
									"jwt_body.nonce = pm.request.url.query.get(\"nonce\");",
									"jwt_body.acr_values = pm.request.url.query.get(\"acr_values\");",
									"jwt_body.max_age = Number(pm.request.url.query.get(\"max_age\"));",
									"jwt_body.response_mode = pm.request.url.query.get(\"response_mode\");",
									"",
									"console.log(\"jwt_body\",jwt_body);",
									"",
									"",
									"// // encode header",
									"// var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(jwt_header));",
									"// var encodedHeader = base64url(stringifiedHeader);",
									"",
									"// // encode data",
									"// var stringifiedBody = CryptoJS.enc.Utf8.parse(JSON.stringify(jwt_body));",
									"// var encodedBody = base64url(stringifiedBody);",
									"",
									"// // build token",
									"// var token = encodedHeader + \".\" + encodedBody;",
									"",
									"// console.log(\"token\", token);",
									"",
									"// // sign token",
									"// var secret = pm.environment.get(\"client_private_key\");",
									"// // CryptoJS doesn't support RSA for encryption!! ",
									"// // Need to find a work around, for the moment, this script doesn't work",
									"// // AFAIK, it's very complicated to add another js library to postman",
									"// var signature = CryptoJS.HmacSHA256(token, secret);",
									"// signature = base64url(signature);",
									"// console.log(\"Signature\", signature);",
									"// var signedToken = token + \".\" + signature;",
									"// console.log(\"signed token\", signedToken);",
									"",
									"// postman.setEnvironmentVariable(\"signed token\", signedToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false,
						"followRedirects": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "request",
									"value": "{{par_jwt}}",
									"type": "text"
								},
								{
									"key": "aud",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/par",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"par"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Authorise - Step 1 (Hybrid) - /authorise",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store html interaction  and uuid to use in subsequent calls",
									"",
									"var html = cheerio(responseBody);",
									"var nextInteraction1 = html.find('#loginForm').attr('action');",
									"var uuid = html.find('#uuid').attr('value');",
									"var acr = html.find('#acr').attr('value');",
									"",
									"pm.environment.set(\"nextInteraction1\", nextInteraction1);",
									"pm.environment.set(\"uuid\", uuid);",
									"pm.environment.set(\"acr\", acr);",
									"",
									"// If the auth code had already been issued and was still valid, this",
									"// invocation would directly return it (no necessary login)",
									"// if that's the case, store the resulting auth_code ",
									"",
									"const htmlResponse = cheerio(responseBody);",
									"var temp_auth_code = html.find('[name=\"code\"]').val();",
									"var temp_id_token = html.find('[name=\"id_token\"]').val();",
									"var temp_state = html.find('[name=\"state\"]').val();",
									"const $ = cheerio.load(responseBody);",
									"var temp_cb_uri = $('form').attr('action');",
									"pm.environment.set(\"temp_auth_code\", temp_auth_code);",
									"pm.environment.set(\"temp_id_token\", temp_id_token);",
									"pm.environment.set(\"temp_state\", temp_state);",
									"pm.environment.set(\"temp_cb_uri\", temp_cb_uri);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/authorise?client_id={{client_id}}&response_type=code%20id_token&scope=openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read&request_uri={{PAR_request_uri}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"authorise"
							],
							"query": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"description": "If you want to change this value, always do it by altering the corresponding env variable. IMPORTANT: This client_id, as well as its redirect uri and public key needs to be registered with the OIDC provider included in the reference implementation (Manual edit of client configuration file)"
								},
								{
									"key": "response_type",
									"value": "code%20id_token"
								},
								{
									"key": "scope",
									"value": "openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read",
									"description": "Add the required scopes, separated by %20"
								},
								{
									"key": "request_uri",
									"value": "{{PAR_request_uri}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Authorise - Step 2 (Hybrid) - Submit login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store html interaction  and uuid to use in subsequent calls",
									"",
									"var html = cheerio(responseBody);",
									"var nextInteraction2 = html.find('#consentForm').attr('action');",
									"var uuid = html.find('#uuid').attr('value');",
									"var acr = html.find('#acr').attr('value');",
									"var account = html.find('#account').attr('value');",
									"var consentResponse = html.find('#consent').attr('value');",
									"",
									"pm.environment.set(\"nextInteraction2\", nextInteraction2);",
									"pm.environment.set(\"uuid\", uuid);",
									"pm.environment.set(\"acr\", acr);",
									"pm.environment.set(\"account\", account);",
									"pm.environment.set(\"consentResponse\", consentResponse);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{uuid}}",
									"type": "text"
								},
								{
									"key": "login",
									"value": "10203040",
									"type": "text"
								},
								{
									"key": "password",
									"value": "anyPasswordWillDo",
									"type": "text"
								},
								{
									"key": "acr",
									"value": "{{acr}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net{{nextInteraction1}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net{{nextInteraction1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Authorise - Step 3 (Hybrid) - Submit consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store callback response from IdP to use in subsequent call",
									"",
									"const htmlResponse = cheerio(responseBody);",
									"var temp_auth_code = htmlResponse.find('[name=\"code\"]').val();",
									"var temp_id_token = htmlResponse.find('[name=\"id_token\"]').val();",
									"var temp_state = htmlResponse.find('[name=\"state\"]').val();",
									"const $ = cheerio.load(responseBody);",
									"var temp_cb_uri = $('form').attr('action');",
									"pm.environment.set(\"temp_auth_code\", temp_auth_code);",
									"pm.environment.set(\"temp_id_token\", temp_id_token);",
									"pm.environment.set(\"temp_state\", temp_state);",
									"pm.environment.set(\"temp_cb_uri\", temp_cb_uri);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{uuid}}",
									"type": "text"
								},
								{
									"key": "account",
									"value": "{{account}}",
									"type": "text"
								},
								{
									"key": "acr",
									"value": "{{acr}}",
									"type": "text"
								},
								{
									"key": "bank:accounts.basic:read",
									"value": "bank:accounts.basic:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text"
								},
								{
									"key": "bank:accounts.detail:read",
									"value": "bank:accounts.detail:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text"
								},
								{
									"key": "bank:transactions:read",
									"value": "bank:transactions:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text"
								},
								{
									"key": "bank:payees:read",
									"value": "bank:payees:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "bank:regular_payments:read",
									"value": "bank:regular_payments:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "common:customer.basic:read",
									"value": "common:customer.basic:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "common:customer.detail:read",
									"value": "common:customer.detail:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net{{nextInteraction2}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net{{nextInteraction2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Authorise - Step 3.5 (Hybrid)  - Follow redirect to obtain auth code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store authorisation code to use in subsequent calls",
									"",
									"const html_response = cheerio(responseBody);",
									"var auth_code = html_response.find('[name=\"code\"]').val();",
									"",
									"pm.environment.set(\"auth_code\", auth_code);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code",
									"value": "{{temp_auth_code}}",
									"type": "text"
								},
								{
									"key": "id_token",
									"value": "{{temp_id_token}}",
									"type": "text"
								},
								{
									"key": "state",
									"value": "{{temp_state}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{temp_cb_uri}}",
							"host": [
								"{{temp_cb_uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Acquire Token - Step 4 (Hybrid) - Basic Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store scope, access token and id token to reuse in subsequent calls",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"access_token\", jsonData.access_token);",
									"pm.environment.set(\"id_token\", jsonData.id_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"pm.environment.set(\"scope\", jsonData.scope);",
									"pm.environment.set(\"cdr_arrangement_id\", jsonData.cdr_arrangement_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{auth_code}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{client_redirect_uri}}",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/token",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				}
			],
			"description": "These 4 requests automate the steps of obtaining an authorisation code by navigating through the mock login and consent screens and obtaining a token using the authorisation code\n Use this approach when testing a client that has been added during the initial setup, as those client are persisted in the mock oidc provider and have been defined as accepting basic client auth.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "OIDC - Authorise/Obtain Token (HF)  - Private Key JWT",
			"item": [
				{
					"name": "OIDC Authorise - Step 1 (Hybrid) - /authorise",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store html interaction  and uuid to use in subsequent calls",
									"",
									"var html = cheerio(responseBody);",
									"var nextInteraction1 = html.find('#loginForm').attr('action');",
									"var uuid = html.find('#uuid').attr('value');",
									"var acr = html.find('#acr').attr('value');",
									"",
									"pm.environment.set(\"nextInteraction1\", nextInteraction1);",
									"pm.environment.set(\"uuid\", uuid);",
									"pm.environment.set(\"acr\", acr);",
									"",
									"// If the auth code had already been issued and was still valid, this",
									"// invocation would directly return it (no necessary login)",
									"// if that's the case, store the resulting auth_code ",
									"",
									"var auth_code = html.find('[name=\"code\"]').val();",
									"",
									"pm.environment.set(\"auth_code\", auth_code);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/authorise?client_id={{dynamic_client_id}}&redirect_uri={{client_redirect_uri}}&response_type=code%20id_token&scope=openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read&state=af0ifjsldkla&nonce=n-0S6_WzA2Mj2&max_age=600&acr_values=urn:cds.au:cdr:3&response_mode=form_post&jti=37747cd1-c105-4569-9f75-4adf28b73e32&exp=1596692638",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"authorise"
							],
							"query": [
								{
									"key": "client_id",
									"value": "{{dynamic_client_id}}",
									"description": "If you want to change this value, always do it by altering the corresponding env variable. IMPORTANT: This client_id, as well as its redirect uri and public key needs to be registered with the OIDC provider included in the reference implementation (Manual edit of client configuration file)"
								},
								{
									"key": "redirect_uri",
									"value": "{{client_redirect_uri}}",
									"description": "If you want to change this value, always do it by altering the corresponding env variable"
								},
								{
									"key": "response_type",
									"value": "code%20id_token"
								},
								{
									"key": "scope",
									"value": "openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read",
									"description": "Add the required scopes, separated by %20"
								},
								{
									"key": "state",
									"value": "af0ifjsldkla",
									"description": "For test purposes, any string will do"
								},
								{
									"key": "nonce",
									"value": "n-0S6_WzA2Mj2",
									"description": "For test purposes, any string will do"
								},
								{
									"key": "max_age",
									"value": "600"
								},
								{
									"key": "acr_values",
									"value": "urn:cds.au:cdr:3",
									"description": "One of the valid authentication types the OIDC provider accepts"
								},
								{
									"key": "response_mode",
									"value": "form_post",
									"description": "This response mode allows automation in Postman in the Step to get the authorisation code"
								},
								{
									"key": "jti",
									"value": "37747cd1-c105-4569-9f75-4adf28b73e32",
									"description": "For test purposes, any jti will do"
								},
								{
									"key": "exp",
									"value": "1596692638",
									"description": "Epoch timestamp. Any value in the future will work"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Authorise - Step 2 (Hybrid) - Submit login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store html interaction  and uuid to use in subsequent calls",
									"",
									"var html = cheerio(responseBody);",
									"var nextInteraction2 = html.find('#consentForm').attr('action');",
									"var uuid = html.find('#uuid').attr('value');",
									"var acr = html.find('#acr').attr('value');",
									"var account = html.find('#account').attr('value');",
									"var consentResponse = html.find('#consent').attr('value');",
									"",
									"pm.environment.set(\"nextInteraction2\", nextInteraction2);",
									"pm.environment.set(\"uuid\", uuid);",
									"pm.environment.set(\"acr\", acr);",
									"pm.environment.set(\"account\", account);",
									"pm.environment.set(\"consentResponse\", consentResponse);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{uuid}}",
									"type": "text"
								},
								{
									"key": "login",
									"value": "10203040",
									"type": "text"
								},
								{
									"key": "password",
									"value": "anyPasswordWillDo",
									"type": "text"
								},
								{
									"key": "acr",
									"value": "{{acr}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net{{nextInteraction1}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net{{nextInteraction1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Authorise - Step 3 (Hybrid) - Submit consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store callback response from IdP to use in subsequent call",
									"",
									"const htmlResponse = cheerio(responseBody);",
									"var temp_auth_code = htmlResponse.find('[name=\"code\"]').val();",
									"var temp_id_token = htmlResponse.find('[name=\"id_token\"]').val();",
									"var temp_state = htmlResponse.find('[name=\"state\"]').val();",
									"const $ = cheerio.load(responseBody);",
									"var temp_cb_uri = $('form').attr('action');",
									"pm.environment.set(\"temp_auth_code\", temp_auth_code);",
									"pm.environment.set(\"temp_id_token\", temp_id_token);",
									"pm.environment.set(\"temp_state\", temp_state);",
									"pm.environment.set(\"temp_cb_uri\", temp_cb_uri);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "uuid",
									"value": "{{uuid}}",
									"type": "text"
								},
								{
									"key": "account",
									"value": "{{account}}",
									"type": "text"
								},
								{
									"key": "acr",
									"value": "{{acr}}",
									"type": "text"
								},
								{
									"key": "bank:accounts.basic:read",
									"value": "bank:accounts.basic:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text"
								},
								{
									"key": "bank:accounts.detail:read",
									"value": "bank:accounts.detail:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text"
								},
								{
									"key": "bank:transactions:read",
									"value": "bank:transactions:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text"
								},
								{
									"key": "bank:payees:read",
									"value": "bank:payees:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "bank:regular_payments:read",
									"value": "bank:regular_payments:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "common:customer.basic:read",
									"value": "common:customer.basic:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "common:customer.detail:read",
									"value": "common:customer.detail:read",
									"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net{{nextInteraction2}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net{{nextInteraction2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Authorise Local - Step 3.5 (Hybrid)  - Follow redirect to obtain auth code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store authorisation code to use in subsequent calls",
									"",
									"const html_response = cheerio(responseBody);",
									"var auth_code = html_response.find('[name=\"code\"]').val();",
									"",
									"pm.environment.set(\"auth_code\", auth_code);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code",
									"value": "{{temp_auth_code}}",
									"type": "text"
								},
								{
									"key": "id_token",
									"value": "{{temp_id_token}}",
									"type": "text"
								},
								{
									"key": "state",
									"value": "{{temp_state}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{temp_cb_uri}}",
							"host": [
								"{{temp_cb_uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Acquire Token - Step 4.1 - Generate Private Key JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store private_key_jwt to reuse in next call",
									"pm.environment.set(\"private_key_jwt\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/mock-adr-client/privatekeyjwt?client_id={{dynamic_client_id}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"mock-adr-client",
								"privatekeyjwt"
							],
							"query": [
								{
									"key": "aud",
									"value": "http://pirulo.com",
									"disabled": true
								},
								{
									"key": "client_id",
									"value": "{{dynamic_client_id}}"
								}
							]
						},
						"description": "Use Mock ADR client capabilities to generate the client_assertion required in the next step"
					},
					"response": []
				},
				{
					"name": "OIDC Acquire Token - Step 4.2 (Hybrid) - Private Key JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store scope, access token and id token to reuse in subsequent calls",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"access_token\", jsonData.access_token);",
									"pm.environment.set(\"id_token\", jsonData.id_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"pm.environment.set(\"scope\", jsonData.scope);",
									"pm.environment.set(\"cdr_arrangement_id\", jsonData.cdr_arrangement_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{auth_code}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{client_redirect_uri}}",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "true",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{dynamic_client_id}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{private_key_jwt}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/token",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				}
			],
			"description": "These 4 requests automate the steps of obtaining an authorisation code by navigating through the mock login and consent screens and obtaining a token using the authorisation code.\n When obtaining the token, it uses private key jwt authentication method. \n Use this approach when testing a client that has been added using Dynamic Client Registration (Bear in mind that mock-oidc-provider does NOT persist new clients, so after a while they may no longer work)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "OIDC - Other requests",
			"item": [
				{
					"name": "OIDC Get Config",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/.well-known/openid-configuration",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Token Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store access token, id token and refresh token to reuse in subsequent calls",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"access_token\", jsonData.access_token);",
									"pm.environment.set(\"id_token\", jsonData.id_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-fapi-customer-ip-address",
								"value": "192.168.1.1",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{scope}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/token",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Token Introspection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "text"
								},
								{
									"key": "token_type_hint",
									"value": "refresh_token",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/token/introspection",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"token",
								"introspection"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Token Revocation (Access Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "text"
								},
								{
									"key": "token_type_hint",
									"value": "access_token",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/token/revocation",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"token",
								"revocation"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Token Revocation (Refresh Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "text"
								},
								{
									"key": "token_type_hint",
									"value": "refresh_token",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/token/revocation",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"token",
								"revocation"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC CDR Arrangement Revocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "cdr_arrangement_id",
									"value": "{{cdr_arrangement_id}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/arrangements/revoke",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"arrangements",
								"revoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC UserInfo",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/me",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "OIDC Get JWKS Certs",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/jwks",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"jwks"
							]
						}
					},
					"response": []
				}
			],
			"description": "Requests to the other oidc endpoints (eg: .well-known/configuration, refresh token, revoke token ,etc)"
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get Products",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"type": "text",
								"value": "3"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-fapi-interaction-id",
								"type": "text",
								"value": "2965365e-ab4d-4158-8eda-ca48f1f4f225",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/products",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"products"
							],
							"query": [
								{
									"key": "effective",
									"value": "ALL",
									"disabled": true
								},
								{
									"key": "product-category",
									"value": "TERM_DEPOSITS",
									"disabled": true
								},
								{
									"key": "updated-since",
									"value": "2018-04-15T00:00:00%2B11:00",
									"disabled": true
								},
								{
									"key": "page-size",
									"value": "1",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "brand",
									"value": "Savings",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product Details",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"type": "text",
								"value": "3"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-fapi-interaction-id",
								"type": "text",
								"value": "2965365e-ab4d-4158-8eda-ca48f1f4f225",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/products/BasicMortgage1",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"products",
								"BasicMortgage1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Options for Get Products",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "x-v",
								"value": "3",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/products",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Accounts",
			"item": [
				{
					"name": "Get Accounts",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "2965365e-ab4d-4158-8eda-ca48f1f4f225",
								"type": "text"
							},
							{
								"key": "x-fapi-auth-date",
								"value": "2019-08-01",
								"type": "text"
							},
							{
								"key": "x-fapi-customer-ip-address",
								"value": "192.168.1.1",
								"type": "text"
							},
							{
								"key": "x-cds-client-headers",
								"value": "Base64EncodedString1",
								"description": "Base64 Encoded String",
								"type": "text"
							},
							{
								"key": "x-min-v",
								"value": "1",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts"
							],
							"query": [
								{
									"key": "open-status",
									"value": "ALL",
									"disabled": true
								},
								{
									"key": "product-category",
									"value": "TRANS_AND_SAVINGS_ACCOUNTS",
									"disabled": true
								},
								{
									"key": "is-owned",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page-size",
									"value": "1",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts - Test Invalid Headers",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "x-min-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/jxon;charset=UTF-8"
							},
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							},
							{
								"key": "x-cds-client-headers",
								"value": "1234567=",
								"description": "Base64 Encoded String",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts"
							],
							"query": [
								{
									"key": "open-status",
									"value": "ALL",
									"disabled": true
								},
								{
									"key": "product-category",
									"value": "PERS_AT_CALL_DEPOSITS",
									"disabled": true
								},
								{
									"key": "is-owned",
									"value": "false",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "page-size",
									"value": "1000",
									"disabled": true
								}
							]
						},
						"description": "Selectively remove or change header values to other values to check different error messages"
					},
					"response": []
				},
				{
					"name": "Get Options for Get Accounts",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "x-fapi-correlation-id",
								"type": "text",
								"value": "TEST"
							},
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts"
							],
							"query": [
								{
									"key": "open-status",
									"value": "ALL",
									"disabled": true
								},
								{
									"key": "product-category",
									"value": "PERS_AT_CALL_DEPOSITS",
									"disabled": true
								},
								{
									"key": "is-owned",
									"value": "NOT_OWNED",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Account Details",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							},
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-cds-subject",
								"value": "{{cdsSubject}}",
								"type": "text"
							},
							{
								"key": "x-fapi-auth-date",
								"value": "2019-12-18",
								"type": "text"
							},
							{
								"key": "x-fapi-customer-ip-address",
								"value": "192.168.1.1",
								"type": "text"
							},
							{
								"key": "x-cds-client-headers",
								"value": "Base64EncodedString1",
								"description": "Base64 Encoded String",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts/10203040-Acc003",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"10203040-Acc003"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Balances",
			"item": [
				{
					"name": "Get Bulk Balances",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-fapi-interaction-id",
								"type": "text",
								"value": "2965365e-ab4d-4158-8eda-ca48f1f4f225"
							},
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							},
							{
								"key": "x-fapi-customer-ip-address",
								"type": "text",
								"value": "192.168.1.1"
							},
							{
								"description": "Base64 Encoded String",
								"key": "x-cds-client-headers",
								"type": "text",
								"value": "Base64EncodedString1"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts/balances",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"balances"
							],
							"query": [
								{
									"key": "open-status",
									"value": "OPEN",
									"disabled": true
								},
								{
									"key": "product-category",
									"value": "TRANS_AND_SAVINGS_ACCOUNTS",
									"disabled": true
								},
								{
									"key": "is-owned",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page-size",
									"value": "1",
									"disabled": true
								},
								{
									"key": "page",
									"value": "3",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Balances For Specific Accounts",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-fapi-interaction-id",
								"type": "text",
								"value": "2965365e-ab4d-4158-8eda-ca48f1f4f225"
							},
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							},
							{
								"key": "x-fapi-customer-ip-address",
								"type": "text",
								"value": "192.168.1.1"
							},
							{
								"description": "Base64 Encoded String",
								"key": "x-cds-client-headers",
								"type": "text",
								"value": "Base64EncodedString1"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"accountIds\": [\n      \"10203040-Acc001\",\"10203040-Acc003\"\n    ]\n  },\n  \"meta\": {}\n}"
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts/balances",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"balances"
							],
							"query": [
								{
									"key": "page-size",
									"value": "1",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Balances For Specific Accounts - Invalid Account",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-fapi-interaction-id",
								"type": "text",
								"value": "2965365e-ab4d-4158-8eda-ca48f1f4f225",
								"disabled": true
							},
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							},
							{
								"key": "x-fapi-customer-ip-address",
								"type": "text",
								"value": "192.168.1.1"
							},
							{
								"description": "Base64 Encoded String",
								"key": "x-cds-client-headers",
								"type": "text",
								"value": "Base64EncodedString1"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"accountIds\": [\n      \"10203040-Acc001\",\"10203040-Accxxx\"\n    ]\n  },\n  \"meta\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts/balances",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"balances"
							],
							"query": [
								{
									"key": "page-size",
									"value": "1",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bulk Balances - Test Invalid Headers",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "x-min-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							},
							{
								"key": "x-cds-client-headers",
								"value": "InvalidBase64EncodedString@!%*",
								"description": "Base64 Encoded String",
								"type": "text"
							},
							{
								"key": "x-fapi-customer-ip-address",
								"value": "10.0.0.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts/balances",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"balances"
							],
							"query": [
								{
									"key": "open-status",
									"value": "ALL",
									"disabled": true
								},
								{
									"key": "product-category",
									"value": "PERS_AT_CALL_DEPOSITS",
									"disabled": true
								},
								{
									"key": "is-owned",
									"value": "false",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "page-size",
									"value": "1000",
									"disabled": true
								}
							]
						},
						"description": "Selectively remove or change header values to other values to check different error messages"
					},
					"response": []
				},
				{
					"name": "Get Options for Get Bulk Balances",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "x-fapi-correlation-id",
								"type": "text",
								"value": "TEST"
							},
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts/balances",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"balances"
							],
							"query": [
								{
									"key": "open-status",
									"value": "ALL",
									"disabled": true
								},
								{
									"key": "product-category",
									"value": "PERS_AT_CALL_DEPOSITS",
									"disabled": true
								},
								{
									"key": "is-owned",
									"value": "NOT_OWNED",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Account Balance",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							},
							{
								"key": "x-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts/10203040-Acc003/balance",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"10203040-Acc003",
								"balance"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "Get Transactions For Account",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "2965365e-ab4d-4158-8eda-ca48f1f4f225",
								"type": "text"
							},
							{
								"key": "x-fapi-auth-date",
								"value": "2019-08-01",
								"type": "text"
							},
							{
								"key": "x-fapi-customer-ip-address",
								"value": "192.168.1.1",
								"type": "text"
							},
							{
								"key": "x-cds-client-headers",
								"value": "Base64EncodedString1",
								"description": "Base64 Encoded String",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts/{{accountId}}/transactions",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"{{accountId}}",
								"transactions"
							],
							"query": [
								{
									"key": "oldest-time",
									"value": "2016-04-15T00:00:00%2B11:00",
									"disabled": true
								},
								{
									"key": "newest-time",
									"value": "2021-04-15T00:00:00%2B11:00",
									"disabled": true
								},
								{
									"key": "min-amount",
									"value": "0",
									"disabled": true
								},
								{
									"key": "max-amount",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "text",
									"value": "pay",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page-size",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transactions For Account - Test Invalid Headers or Params",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "x-min-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							},
							{
								"key": "x-cds-client-headers",
								"value": "InvalidBase64String@!$$#",
								"description": "Base64 Encoded String",
								"type": "text"
							},
							{
								"key": "x-fapi-customer-ip-address",
								"value": "10.0.0.1",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts/{{accountId}}/transactions?max-amount=-5",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"{{accountId}}",
								"transactions"
							],
							"query": [
								{
									"key": "oldest-time",
									"value": "2016-04-15T00:00:00%2B11:00",
									"disabled": true
								},
								{
									"key": "newest-time",
									"value": "2021-04-15T00:00:00%2B11:00",
									"disabled": true
								},
								{
									"key": "min-amount",
									"value": "0",
									"disabled": true
								},
								{
									"key": "max-amount",
									"value": "-5"
								},
								{
									"key": "text",
									"value": "pay",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "page-size",
									"value": "1000",
									"disabled": true
								}
							]
						},
						"description": "Selectively remove or change header or param values to other values to check different error messages"
					},
					"response": []
				},
				{
					"name": "Get Options for Get Transactions For Accounts",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "x-fapi-correlation-id",
								"type": "text",
								"value": "TEST"
							},
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts/{{accountId}}/transactions",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"{{accountId}}",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction Detail",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							},
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-customer-ip-address",
								"value": "192.168.0.1",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/banking/accounts/{{accountId}}/transactions/tx0003",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"{{accountId}}",
								"transactions",
								"tx0003"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Discovery",
			"item": [
				{
					"name": "Get Outages",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"accept-encoding": true,
							"connection": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"type": "text",
								"value": "1"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/discovery/outages",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"discovery",
								"outages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Status",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"accept-encoding": true,
							"connection": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "x-min-v",
								"value": "2",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/discovery/status",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"discovery",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Options for Get Status",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/discovery/status",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"discovery",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "OIDC - Obtain token for Admin Operations",
					"item": [
						{
							"name": "Step 1 - Mock CDR Register - Get Private Key JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store private_key_jwt to reuse in next call",
											"pm.environment.set(\"cdr_register_private_key_jwt\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net/mock-cdr-register/privatekeyjwt?cdr-register-client-id={{cdr_register_client_id}}",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net"
									],
									"path": [
										"mock-cdr-register",
										"privatekeyjwt"
									],
									"query": [
										{
											"key": "aud",
											"value": "http://pirulo.com",
											"disabled": true
										},
										{
											"key": "cdr-register-client-id",
											"value": "{{cdr_register_client_id}}",
											"description": "The client Id assigned to the CDR Register client (CDRRegisterTestApp)"
										}
									]
								},
								"description": "Obtain Private Key JWT required to request an access token using the private key JWT authentication method"
							},
							"response": []
						},
						{
							"name": "Step 2 - OIDC Acquire Token for  Admin Operations (Private Key JWT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store scope, access token and id token to reuse in subsequent calls",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"cdr_register_access_token\", jsonData.access_token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "admin:metrics.basic:read",
											"description": "Scope should be either admin:metadata:update or admin:metrics.basic:read",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{cdr_register_client_id}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{cdr_register_private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net/token",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Metadata Update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cdr_register_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"action\": \"REFRESH\"\n  },\n  \"meta\": {}\n}"
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/admin/register/metadata",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"admin",
								"register",
								"metadata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Metrics",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cdr_register_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"type": "text",
								"value": "2"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/cds-au/v1/admin/metrics?period=ALL",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"cds-au",
								"v1",
								"admin",
								"metrics"
							],
							"query": [
								{
									"key": "period",
									"value": "ALL"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dynamic Client Registration",
			"item": [
				{
					"name": "OIDC - Obtain token for Registration Operations (Get/Update/Delete)",
					"item": [
						{
							"name": "Step 1 - Mock ADR Client - Get Private Key JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store private_key_jwt to reuse in next call",
											"pm.environment.set(\"private_key_jwt\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net/mock-adr-client/privatekeyjwt?client_id={{dynamic_client_id}}",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net"
									],
									"path": [
										"mock-adr-client",
										"privatekeyjwt"
									],
									"query": [
										{
											"key": "aud",
											"value": "http://pirulo.com",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{dynamic_client_id}}"
										}
									]
								},
								"description": "Obtain Private Key JWT required to request an access token using the private key JWT authentication method"
							},
							"response": []
						},
						{
							"name": "Step 2 - OIDC Acquire Token for Client Registration Management Operations (Private Key JWT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store scope, access token and id token to reuse in subsequent calls",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"access_token\", jsonData.access_token);",
											"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
											"pm.environment.set(\"scope\", jsonData.scope);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "cdr:registration",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dynamic_client_id}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net/token",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Generate Request for Register/Update Dynamic Client (Uses Mock ADR Client)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store dcr request to reuse in next call",
									"pm.environment.set(\"dcr_request_jwt\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/mock-adr-client/dcrrequest?org_id=DebsOrg&redirect_uri={{client_redirect_uri}}&software_id=SomeSWID",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"mock-adr-client",
								"dcrrequest"
							],
							"query": [
								{
									"key": "org_id",
									"value": "DebsOrg"
								},
								{
									"key": "recipient_base_uri",
									"value": "https://mycompany.com",
									"disabled": true
								},
								{
									"key": "redirect_uri",
									"value": "{{client_redirect_uri}}"
								},
								{
									"key": "sector_identifier_uri",
									"value": "https://pepe.org",
									"disabled": true
								},
								{
									"key": "software_id",
									"value": "SomeSWID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store client_id and client_secret to reuse in subsequent calls",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"dynamic_client_id\", jsonData.client_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/jwt",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{dcr_request_jwt}}"
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/register",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Client Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/jwt"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/register/{{dynamic_client_id}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"register",
								"{{dynamic_client_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/jwt"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{dcr_request_jwt}}"
						},
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/register/{{dynamic_client_id}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"register",
								"{{dynamic_client_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/jwt"
							}
						],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/register/{{dynamic_client_id}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"register",
								"{{dynamic_client_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HoK Verification",
			"item": [
				{
					"name": "OIDC - Authorise/Obtain Token - Using mTLS",
					"item": [
						{
							"name": "OIDC Authorise - Step 1 (Hybrid) - /authorise",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store html interaction  and uuid to use in subsequent calls",
											"",
											"var html = cheerio(responseBody);",
											"var nextInteraction1 = html.find('#loginForm').attr('action');",
											"var uuid = html.find('#uuid').attr('value');",
											"var acr = html.find('#acr').attr('value');",
											"",
											"pm.environment.set(\"nextInteraction1\", nextInteraction1);",
											"pm.environment.set(\"uuid\", uuid);",
											"pm.environment.set(\"acr\", acr);",
											"",
											"// If the auth code had already been issued and was still valid, this",
											"// invocation would directly return it (no necessary login)",
											"// if that's the case, store the resulting auth_code ",
											"",
											"var auth_code = html.find('[name=\"code\"]').val();",
											"",
											"pm.environment.set(\"auth_code\", auth_code);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net/authorise?client_id={{client_id}}&redirect_uri={{client_redirect_uri}}&response_type=code%20id_token&scope=openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read&state=af0ifjsldkl&nonce=n-0S6_WzA2Mj2&max_age=600&acr_values=urn:cds.au:cdr:3&response_mode=form_post&jti=37747cd1-c105-4569-9f75-4adf28b73e32&exp=1596692638",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net"
									],
									"path": [
										"authorise"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "If you want to change this value, always do it by altering the corresponding env variable. IMPORTANT: This client_id, as well as its redirect uri and public key needs to be registered with the OIDC provider included in the reference implementation (Manual edit of client configuration file)"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"description": "If you want to change this value, always do it by altering the corresponding env variable"
										},
										{
											"key": "response_type",
											"value": "code%20id_token"
										},
										{
											"key": "scope",
											"value": "openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read",
											"description": "Add the required scopes, separated by %20"
										},
										{
											"key": "state",
											"value": "af0ifjsldkl",
											"description": "For test purposes, any string will do"
										},
										{
											"key": "nonce",
											"value": "n-0S6_WzA2Mj2",
											"description": "For test purposes, any string will do"
										},
										{
											"key": "max_age",
											"value": "600"
										},
										{
											"key": "acr_values",
											"value": "urn:cds.au:cdr:3",
											"description": "One of the valid authentication types the OIDC provider accepts"
										},
										{
											"key": "response_mode",
											"value": "form_post",
											"description": "This response mode allows automation in Postman in the Step to get the authorisation code"
										},
										{
											"key": "jti",
											"value": "37747cd1-c105-4569-9f75-4adf28b73e32",
											"description": "For test purposes, any jti will do"
										},
										{
											"key": "exp",
											"value": "1596692638",
											"description": "Epoch timestamp. Any value in the future will work"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Authorise - Step 2 (Hybrid) - Submit login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store html interaction  and uuid to use in subsequent calls",
											"",
											"var html = cheerio(responseBody);",
											"var nextInteraction2 = html.find('#consentForm').attr('action');",
											"var uuid = html.find('#uuid').attr('value');",
											"var acr = html.find('#acr').attr('value');",
											"var account = html.find('#account').attr('value');",
											"var consentResponse = html.find('#consent').attr('value');",
											"",
											"pm.environment.set(\"nextInteraction2\", nextInteraction2);",
											"pm.environment.set(\"uuid\", uuid);",
											"pm.environment.set(\"acr\", acr);",
											"pm.environment.set(\"account\", account);",
											"pm.environment.set(\"consentResponse\", consentResponse);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "uuid",
											"value": "{{uuid}}",
											"type": "text"
										},
										{
											"key": "login",
											"value": "10203040",
											"type": "text"
										},
										{
											"key": "password",
											"value": "anyPasswordWillDo",
											"type": "text"
										},
										{
											"key": "acr",
											"value": "{{acr}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net{{nextInteraction1}}",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net{{nextInteraction1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Authorise - Step 3 (Hybrid) - Submit consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store IDP issued auth code and id token to use in subsequent call",
											"",
											"const htmlResponse = cheerio(responseBody);",
											"var temp_auth_code = htmlResponse.find('[name=\"code\"]').val();",
											"var temp_id_token = htmlResponse.find('[name=\"id_token\"]').val();",
											"var temp_state = htmlResponse.find('[name=\"state\"]').val();",
											"const $ = cheerio.load(responseBody);",
											"var temp_cb_uri = $('form').attr('action');",
											"pm.environment.set(\"temp_auth_code\", temp_auth_code);",
											"pm.environment.set(\"temp_id_token\", temp_id_token);",
											"pm.environment.set(\"temp_state\", temp_state);",
											"pm.environment.set(\"temp_cb_uri\", temp_cb_uri);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "uuid",
											"value": "{{uuid}}",
											"type": "text"
										},
										{
											"key": "account",
											"value": "{{account}}",
											"type": "text"
										},
										{
											"key": "acr",
											"value": "{{acr}}",
											"type": "text"
										},
										{
											"key": "bank:accounts.basic:read",
											"value": "bank:accounts.basic:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text"
										},
										{
											"key": "bank:accounts.detail:read",
											"value": "bank:accounts.detail:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text"
										},
										{
											"key": "bank:transactions:read",
											"value": "bank:transactions:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text"
										},
										{
											"key": "bank:payees:read",
											"value": "bank:payees:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bank:regular_payments:read",
											"value": "bank:regular_payments:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "common:customer.basic:read",
											"value": "common:customer.basic:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "common:customer.detail:read",
											"value": "common:customer.detail:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net{{nextInteraction2}}",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net{{nextInteraction2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Authorise Local - Step 3.5 (Hybrid)  - Follow redirect to obtain auth code Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store authorisation code to use in subsequent calls",
											"",
											"const html_response = cheerio(responseBody);",
											"var auth_code = html_response.find('[name=\"code\"]').val();",
											"",
											"pm.environment.set(\"auth_code\", auth_code);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{temp_auth_code}}",
											"type": "text"
										},
										{
											"key": "id_token",
											"value": "{{temp_id_token}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{temp_state}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{temp_cb_uri}}",
									"host": [
										"{{temp_cb_uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Acquire Token - Step 4 (Hybrid) - Basic Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store scope, access token and id token to reuse in subsequent calls",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"access_token\", jsonData.access_token);",
											"pm.environment.set(\"id_token\", jsonData.id_token);",
											"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
											"pm.environment.set(\"scope\", jsonData.scope);",
											"pm.environment.set(\"cdr_arrangement_id\", jsonData.cdr_arrangement_id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{mtls-endpoint}}/token",
									"protocol": "https",
									"host": [
										"{{mtls-endpoint}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					],
					"description": "These 4 requests automate the steps of obtaining an authorisation code by navigating through the mock login and consent screens and obtaining a token using the authorisation code\n Use this approach when testing a client that has been added during the initial setup, as those client are persisted in the mock oidc provider and have been defined as accepting basic client auth.\n The last step uses an MTLS protected endpoint, and the client certificate presented will be associated with the issued token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "OIDC - Authorise/Obtain Token (HF) - mTLS and PAR",
					"item": [
						{
							"name": "Steo 0 - Generate PAR request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store PAR jwt to reuse in next call",
											"pm.environment.set(\"par_jwt\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net/mock-adr-client/parrequest?aud=https://{{org}}-{{env}}.apigee.net&client_id={{client_id}}&state=af0ifjsldkl&scope=openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read&redirect_uri={{client_redirect_uri}}&nonce=n-0S6_WzA2Mj32&sharing_duration=1800",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net"
									],
									"path": [
										"mock-adr-client",
										"parrequest"
									],
									"query": [
										{
											"key": "aud",
											"value": "https://{{org}}-{{env}}.apigee.net"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "af0ifjsldkl"
										},
										{
											"key": "scope",
											"value": "openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}"
										},
										{
											"key": "nonce",
											"value": "n-0S6_WzA2Mj32"
										},
										{
											"key": "sharing_duration",
											"value": "1800"
										},
										{
											"key": "cdr_arrangement_id",
											"value": "{{cdr_arrangement_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Authorise - Step 0 (Hybrid) - /par",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store the returned URI to reuse in subsequent calls",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"PAR_request_uri\", jsonData.request_uri);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Build JWT request based on params, and add to \"request\" param",
											"",
											"CryptoJS = require(\"crypto-js\");",
											"",
											"function base64url(source) {",
											"\t// Encode in classical base64",
											"\tencodedSource = CryptoJS.enc.Base64.stringify(source);",
											"",
											"\t// Remove padding equal characters",
											"\tencodedSource = encodedSource.replace(/=+$/, '');",
											"",
											"\t// Replace characters according to base64url specifications",
											"\tencodedSource = encodedSource.replace(/\\+/g, '-');",
											"\tencodedSource = encodedSource.replace(/\\//g, '_');",
											"",
											"\treturn encodedSource;",
											"}",
											"",
											"jwt_header = {};",
											"jwt_header.alg = \"RS256\";",
											"jwt_header.typ = \"JWT\";",
											"jwt_header.kid = pm.environment.get(\"client_public_key_kid\");",
											"",
											"console.log(\"jwt_header\",jwt_header);",
											"",
											"jwt_body = {};",
											"jwt_body.iss = pm.environment.get(\"client_id\");",
											"jwt_body.client_id = pm.environment.get(\"client_id\");",
											"jwt_body.sub = pm.environment.get(\"client_id\");",
											"jwt_body.aud = pm.environment.get(\"api_endpoint\");",
											"jwt_body.jti = pm.request.url.query.get(\"jti\");",
											"jwt_body.exp = Number(pm.request.url.query.get(\"exp\"));",
											"jwt_body.response_type = decodeURI(pm.request.url.query.get(\"response_type\"));",
											"jwt_body.redirect_uri = pm.environment.get(\"client_redirect_uri\");",
											"jwt_body.scope = decodeURI(pm.request.url.query.get(\"scope\"));",
											"jwt_body.state = pm.request.url.query.get(\"state\");",
											"jwt_body.nonce = pm.request.url.query.get(\"nonce\");",
											"jwt_body.acr_values = pm.request.url.query.get(\"acr_values\");",
											"jwt_body.max_age = Number(pm.request.url.query.get(\"max_age\"));",
											"jwt_body.response_mode = pm.request.url.query.get(\"response_mode\");",
											"",
											"console.log(\"jwt_body\",jwt_body);",
											"",
											"",
											"// // encode header",
											"// var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(jwt_header));",
											"// var encodedHeader = base64url(stringifiedHeader);",
											"",
											"// // encode data",
											"// var stringifiedBody = CryptoJS.enc.Utf8.parse(JSON.stringify(jwt_body));",
											"// var encodedBody = base64url(stringifiedBody);",
											"",
											"// // build token",
											"// var token = encodedHeader + \".\" + encodedBody;",
											"",
											"// console.log(\"token\", token);",
											"",
											"// // sign token",
											"// var secret = pm.environment.get(\"client_private_key\");",
											"// // CryptoJS doesn't support RSA for encryption!! ",
											"// // Need to find a work around, for the moment, this script doesn't work",
											"// // AFAIK, it's very complicated to add another js library to postman",
											"// var signature = CryptoJS.HmacSHA256(token, secret);",
											"// signature = base64url(signature);",
											"// console.log(\"Signature\", signature);",
											"// var signedToken = token + \".\" + signature;",
											"// console.log(\"signed token\", signedToken);",
											"",
											"// postman.setEnvironmentVariable(\"signed token\", signedToken);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "request",
											"value": "{{par_jwt}}",
											"type": "text"
										},
										{
											"key": "aud",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{mtls-endpoint}}/par",
									"protocol": "https",
									"host": [
										"{{mtls-endpoint}}"
									],
									"path": [
										"par"
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Authorise - Step 1 (Hybrid) - /authorise",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store html interaction  and uuid to use in subsequent calls",
											"",
											"var html = cheerio(responseBody);",
											"var nextInteraction1 = html.find('#loginForm').attr('action');",
											"var uuid = html.find('#uuid').attr('value');",
											"var acr = html.find('#acr').attr('value');",
											"",
											"pm.environment.set(\"nextInteraction1\", nextInteraction1);",
											"pm.environment.set(\"uuid\", uuid);",
											"pm.environment.set(\"acr\", acr);",
											"",
											"// If the auth code had already been issued and was still valid, this",
											"// invocation would directly return it (no necessary login)",
											"// if that's the case, store the resulting auth_code ",
											"",
											"var auth_code = html.find('[name=\"code\"]').val();",
											"",
											"pm.environment.set(\"auth_code\", auth_code);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net/authorise?client_id={{client_id}}&response_type=code%20id_token&scope=openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read&request_uri={{PAR_request_uri}}",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net"
									],
									"path": [
										"authorise"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "If you want to change this value, always do it by altering the corresponding env variable. IMPORTANT: This client_id, as well as its redirect uri and public key needs to be registered with the OIDC provider included in the reference implementation (Manual edit of client configuration file)"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"description": "If you want to change this value, always do it by altering the corresponding env variable",
											"disabled": true
										},
										{
											"key": "response_type",
											"value": "code%20id_token"
										},
										{
											"key": "scope",
											"value": "openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read",
											"description": "Add the required scopes, separated by %20"
										},
										{
											"key": "state",
											"value": "af0ifjsldkl",
											"description": "For test purposes, any string will do",
											"disabled": true
										},
										{
											"key": "nonce",
											"value": "n-0S6_WzA2Mj2",
											"description": "For test purposes, any string will do",
											"disabled": true
										},
										{
											"key": "max_age",
											"value": "600",
											"disabled": true
										},
										{
											"key": "acr_values",
											"value": "urn:cds.au:cdr:3",
											"description": "One of the valid authentication types the OIDC provider accepts",
											"disabled": true
										},
										{
											"key": "response_mode",
											"value": "form_post",
											"description": "This response mode allows automation in Postman in the Step to get the authorisation code",
											"disabled": true
										},
										{
											"key": "jti",
											"value": "37747cd1-c105-4569-9f75-4adf28b73e32",
											"description": "For test purposes, any jti will do",
											"disabled": true
										},
										{
											"key": "exp",
											"value": "1596692638",
											"description": "Epoch timestamp. Any value in the future will work",
											"disabled": true
										},
										{
											"key": "request_uri",
											"value": "{{PAR_request_uri}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Authorise - Step 2 (Hybrid) - Submit login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store html interaction  and uuid to use in subsequent calls",
											"",
											"var html = cheerio(responseBody);",
											"var nextInteraction2 = html.find('#consentForm').attr('action');",
											"var uuid = html.find('#uuid').attr('value');",
											"var acr = html.find('#acr').attr('value');",
											"var account = html.find('#account').attr('value');",
											"var consentResponse = html.find('#consent').attr('value');",
											"",
											"pm.environment.set(\"nextInteraction2\", nextInteraction2);",
											"pm.environment.set(\"uuid\", uuid);",
											"pm.environment.set(\"acr\", acr);",
											"pm.environment.set(\"account\", account);",
											"pm.environment.set(\"consentResponse\", consentResponse);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "uuid",
											"value": "{{uuid}}",
											"type": "text"
										},
										{
											"key": "login",
											"value": "10203040",
											"type": "text"
										},
										{
											"key": "password",
											"value": "anyPasswordWillDo",
											"type": "text"
										},
										{
											"key": "acr",
											"value": "{{acr}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net{{nextInteraction1}}",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net{{nextInteraction1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Authorise - Step 3 (Hybrid) - Submit consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store callback response from IdP to use in subsequent call",
											"",
											"const htmlResponse = cheerio(responseBody);",
											"var temp_auth_code = htmlResponse.find('[name=\"code\"]').val();",
											"var temp_id_token = htmlResponse.find('[name=\"id_token\"]').val();",
											"var temp_state = htmlResponse.find('[name=\"state\"]').val();",
											"const $ = cheerio.load(responseBody);",
											"var temp_cb_uri = $('form').attr('action');",
											"pm.environment.set(\"temp_auth_code\", temp_auth_code);",
											"pm.environment.set(\"temp_id_token\", temp_id_token);",
											"pm.environment.set(\"temp_state\", temp_state);",
											"pm.environment.set(\"temp_cb_uri\", temp_cb_uri);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "uuid",
											"value": "{{uuid}}",
											"type": "text"
										},
										{
											"key": "account",
											"value": "{{account}}",
											"type": "text"
										},
										{
											"key": "acr",
											"value": "{{acr}}",
											"type": "text"
										},
										{
											"key": "bank:accounts.basic:read",
											"value": "bank:accounts.basic:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text"
										},
										{
											"key": "bank:accounts.detail:read",
											"value": "bank:accounts.detail:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text"
										},
										{
											"key": "bank:transactions:read",
											"value": "bank:transactions:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text"
										},
										{
											"key": "bank:payees:read",
											"value": "bank:payees:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bank:regular_payments:read",
											"value": "bank:regular_payments:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "common:customer.basic:read",
											"value": "common:customer.basic:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "common:customer.detail:read",
											"value": "common:customer.detail:read",
											"description": "Simulates consent being granted for this scope (Set to empty if you want to simulate no consent)",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net{{nextInteraction2}}",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net{{nextInteraction2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Authorise - Step 3.5 (Hybrid)  - Follow redirect to obtain auth code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store authorisation code to use in subsequent calls",
											"",
											"const html_response = cheerio(responseBody);",
											"var auth_code = html_response.find('[name=\"code\"]').val();",
											"",
											"pm.environment.set(\"auth_code\", auth_code);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{temp_auth_code}}",
											"type": "text"
										},
										{
											"key": "id_token",
											"value": "{{temp_id_token}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{temp_state}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{temp_cb_uri}}",
									"host": [
										"{{temp_cb_uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Acquire Token - Step 4 (Hybrid) - Basic Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store scope, access token and id token to reuse in subsequent calls",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"access_token\", jsonData.access_token);",
											"pm.environment.set(\"id_token\", jsonData.id_token);",
											"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
											"pm.environment.set(\"scope\", jsonData.scope);",
											"pm.environment.set(\"cdr_arrangement_id\", jsonData.cdr_arrangement_id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{mtls-endpoint}}/token",
									"protocol": "https",
									"host": [
										"{{mtls-endpoint}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					],
					"description": "These 4 requests automate the steps of obtaining an authorisation code by navigating through the mock login and consent screens and obtaining a token using the authorisation code\n Use this approach when testing a client that has been added during the initial setup, as those client are persisted in the mock oidc provider and have been defined as accepting basic client auth.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "OIDC - Other requests - Using mTLS",
					"item": [
						{
							"name": "OIDC Get Config",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net/.well-known/openid-configuration",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								},
								"description": "The response should show the mtls enabled hostname for the userinfo, introspection, token, registration and revocation endpoints"
							},
							"response": []
						},
						{
							"name": "OIDC Token Refresh",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store access token, id token and refresh token to reuse in subsequent calls",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"access_token\", jsonData.access_token);",
											"pm.environment.set(\"id_token\", jsonData.id_token);",
											"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "x-fapi-customer-ip-address",
										"value": "192.168.1.1",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{scope}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{mtls-endpoint}}/token",
									"protocol": "https",
									"host": [
										"{{mtls-endpoint}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Token Introspection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "refresh_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{mtls-endpoint}}/token/introspection",
									"protocol": "https",
									"host": [
										"{{mtls-endpoint}}"
									],
									"path": [
										"token",
										"introspection"
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC CDR Arrangement Revocation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "cdr_arrangement_id",
											"value": "{{cdr_arrangement_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{mtls-endpoint}}/arrangements/revoke",
									"protocol": "https",
									"host": [
										"{{mtls-endpoint}}"
									],
									"path": [
										"arrangements",
										"revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Token Revocation (Access Token)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "access_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{mtls-endpoint}}/token/revocation",
									"protocol": "https",
									"host": [
										"{{mtls-endpoint}}"
									],
									"path": [
										"token",
										"revocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC Token Revocation (Refresh Token)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "refresh_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{mtls-endpoint}}/token/revocation",
									"protocol": "https",
									"host": [
										"{{mtls-endpoint}}"
									],
									"path": [
										"token",
										"revocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "OIDC UserInfo",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{mtls-endpoint}}/me",
									"protocol": "https",
									"host": [
										"{{mtls-endpoint}}"
									],
									"path": [
										"me"
									]
								}
							},
							"response": []
						}
					],
					"description": "Requests to the other oidc endpoints (eg: .well-known/configuration, refresh token, revoke token ,etc)"
				},
				{
					"name": "Dynamic Client Registration - Using mTLS",
					"item": [
						{
							"name": "OIDC - Obtain token for Registration Operations (Get/Update/Delete)",
							"item": [
								{
									"name": "Step 1 - Mock ADR Client - Get Private Key JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Store private_key_jwt to reuse in next call",
													"pm.environment.set(\"private_key_jwt\", pm.response.text());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{org}}-{{env}}.apigee.net/mock-adr-client/privatekeyjwt?client_id={{dynamic_client_id}}",
											"protocol": "https",
											"host": [
												"{{org}}-{{env}}",
												"apigee",
												"net"
											],
											"path": [
												"mock-adr-client",
												"privatekeyjwt"
											],
											"query": [
												{
													"key": "aud",
													"value": "https://{{mtls-endpoint}}",
													"disabled": true
												},
												{
													"key": "client_id",
													"value": "{{dynamic_client_id}}"
												}
											]
										},
										"description": "Obtain Private Key JWT required to request an access token using the private key JWT authentication method"
									},
									"response": []
								},
								{
									"name": "Step 2 - OIDC Acquire Token for Client Registration Management Operations (Private Key JWT)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Store scope, access token and id token to reuse in subsequent calls",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"access_token\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "cdr:registration",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dynamic_client_id}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{mtls-endpoint}}/token",
											"protocol": "https",
											"host": [
												"{{mtls-endpoint}}"
											],
											"path": [
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Generate Request for Register/Update Dynamic Client (Uses Mock ADR Client)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store dcr request to reuse in next call",
											"pm.environment.set(\"dcr_request_jwt\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net/mock-adr-client/dcrrequest?org_id=AAA&redirect_uri={{client_redirect_uri}}&software_id=SomeSWID2",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net"
									],
									"path": [
										"mock-adr-client",
										"dcrrequest"
									],
									"query": [
										{
											"key": "org_id",
											"value": "AAA"
										},
										{
											"key": "recipient_base_uri",
											"value": "https://mycompany.com",
											"disabled": true
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}"
										},
										{
											"key": "software_id",
											"value": "SomeSWID2"
										},
										{
											"key": "aud",
											"value": "https://{{mtls-endpoint}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Store client_id and client_secret to reuse in subsequent calls",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"dynamic_client_id\", jsonData.client_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{dcr_request_jwt}}"
								},
								"url": {
									"raw": "https://{{mtls-endpoint}}/register",
									"protocol": "https",
									"host": [
										"{{mtls-endpoint}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Client Registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/jwt"
									}
								],
								"url": {
									"raw": "https://{{mtls-endpoint}}/register/{{dynamic_client_id}}",
									"protocol": "https",
									"host": [
										"{{mtls-endpoint}}"
									],
									"path": [
										"register",
										"{{dynamic_client_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{dcr_request_jwt}}"
								},
								"url": {
									"raw": "https://{{mtls-endpoint}}/register/{{dynamic_client_id}}",
									"protocol": "https",
									"host": [
										"{{mtls-endpoint}}"
									],
									"path": [
										"register",
										"{{dynamic_client_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/jwt"
									}
								],
								"url": {
									"raw": "https://{{org}}-{{env}}.apigee.net/register/{{dynamic_client_id}}",
									"protocol": "https",
									"host": [
										"{{org}}-{{env}}",
										"apigee",
										"net"
									],
									"path": [
										"register",
										"{{dynamic_client_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Transactions For Account - With HoK Verification",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-fapi-interaction-id",
								"type": "text",
								"value": "2965365e-ab4d-4158-8eda-ca48f1f4f225"
							},
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							},
							{
								"key": "x-fapi-customer-ip-address",
								"type": "text",
								"value": "192.168.1.1"
							},
							{
								"description": "Base64 Encoded String",
								"key": "x-cds-client-headers",
								"type": "text",
								"value": "Base64EncodedString1"
							}
						],
						"url": {
							"raw": "https://{{mtls-endpoint}}/cds-au/v1/banking/accounts/{{accountId}}/transactions",
							"protocol": "https",
							"host": [
								"{{mtls-endpoint}}"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"{{accountId}}",
								"transactions"
							],
							"query": [
								{
									"key": "oldest-time",
									"value": "2016-04-15T00:00:00%2B11:00",
									"disabled": true
								},
								{
									"key": "newest-time",
									"value": "2021-04-15T00:00:00%2B11:00",
									"disabled": true
								},
								{
									"key": "min-amount",
									"value": "0",
									"disabled": true
								},
								{
									"key": "max-amount",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "text",
									"value": "pay",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page-size",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts- With HoK Verification",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "2965365e-ab4d-4158-8eda-ca48f1f4f225",
								"type": "text"
							},
							{
								"key": "x-fapi-auth-date",
								"value": "2019-08-01",
								"type": "text"
							},
							{
								"key": "x-fapi-customer-ip-address",
								"value": "192.168.1.1",
								"type": "text"
							},
							{
								"key": "x-cds-client-headers",
								"value": "Base64EncodedString1",
								"description": "Base64 Encoded String",
								"type": "text"
							},
							{
								"key": "x-min-v",
								"value": "1",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{mtls-endpoint}}/cds-au/v1/banking/accounts",
							"protocol": "https",
							"host": [
								"{{mtls-endpoint}}"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts"
							],
							"query": [
								{
									"key": "open-status",
									"value": "ALL",
									"disabled": true
								},
								{
									"key": "product-category",
									"value": "TRANS_AND_SAVINGS_ACCOUNTS",
									"disabled": true
								},
								{
									"key": "is-owned",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page-size",
									"value": "1",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Account Details - With HoK Verification",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-08-01"
							},
							{
								"key": "x-v",
								"type": "text",
								"value": "1"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-cds-subject",
								"type": "text",
								"value": "{{cdsSubject}}"
							},
							{
								"key": "x-fapi-auth-date",
								"type": "text",
								"value": "2019-12-18"
							},
							{
								"key": "x-fapi-customer-ip-address",
								"type": "text",
								"value": "192.168.1.1"
							},
							{
								"description": "Base64 Encoded String",
								"key": "x-cds-client-headers",
								"type": "text",
								"value": "Base64EncodedString1"
							}
						],
						"url": {
							"raw": "https://{{mtls-endpoint}}/cds-au/v1/banking/accounts/10203040-Acc003",
							"protocol": "https",
							"host": [
								"{{mtls-endpoint}}"
							],
							"path": [
								"cds-au",
								"v1",
								"banking",
								"accounts",
								"10203040-Acc003"
							]
						}
					},
					"response": []
				}
			],
			"description": "Requests to sample endpoints, to demonstrate HoK verification"
		},
		{
			"name": "Mock CDR Register",
			"item": [
				{
					"name": "Mock Register Get JWKS Certs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/mock-cdr-register/jwks",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"mock-cdr-register",
								"jwks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mock Register Get SSA",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/mock-cdr-register/banking/data-recipients/brands/amybrand/software-products/{{softwareProductId}}/ssa?recipient_base_uri=https://{{org}}-{{env}}.apigee.net/mock-adr-client&redirect_uri={{client_redirect_uri}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"mock-cdr-register",
								"banking",
								"data-recipients",
								"brands",
								"amybrand",
								"software-products",
								"{{softwareProductId}}",
								"ssa"
							],
							"query": [
								{
									"key": "org_id",
									"value": "ORG-521",
									"disabled": true
								},
								{
									"key": "recipient_base_uri",
									"value": "https://{{org}}-{{env}}.apigee.net/mock-adr-client"
								},
								{
									"key": "redirect_uri",
									"value": "{{client_redirect_uri}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://mycompany.com/redirect2",
									"disabled": true
								},
								{
									"key": "jwks_uri",
									"value": "https://{{org}}-{{env}}.apigee.net/mock-adr-client/jwks",
									"disabled": true
								},
								{
									"key": "sector_identifier_uri",
									"value": "https://pepe.org",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mock Register Get Admin Request JWT",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/mock-cdr-register/adminrequest?admin-endpoint=https://{{org}}-{{env}}.apigee.net",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"mock-cdr-register",
								"adminrequest"
							],
							"query": [
								{
									"key": "admin-endpoint",
									"value": "https://{{org}}-{{env}}.apigee.net"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mock ADR Client",
			"item": [
				{
					"name": "Mock ADR Client Get JWKS Certs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/mock-adr-client/jwks",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"mock-adr-client",
								"jwks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mock ADR Client - Get Dynamic Client Registration Request JWT",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/mock-adr-client/dcrrequest?org_id=AAA&recipient_base_uri=https://pirulo.com&redirect_uri=https://mycompany.com/redirect1&software_id=swid2",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"mock-adr-client",
								"dcrrequest"
							],
							"query": [
								{
									"key": "org_id",
									"value": "AAA"
								},
								{
									"key": "recipient_base_uri",
									"value": "https://pirulo.com"
								},
								{
									"key": "redirect_uri",
									"value": "https://mycompany.com/redirect1"
								},
								{
									"key": "software_id",
									"value": "swid2"
								},
								{
									"key": "sector_identifier_uri",
									"value": "https://pepe.org",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mock ADR Client - Get Private Key JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store private_key_jwt to reuse in next call",
									"pm.environment.set(\"private_key_jwt\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/mock-adr-client/privatekeyjwt?client_id={{dynamic_client_id}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"mock-adr-client",
								"privatekeyjwt"
							],
							"query": [
								{
									"key": "aud",
									"value": "http://pirulo.com",
									"disabled": true
								},
								{
									"key": "client_id",
									"value": "{{dynamic_client_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mock ADR Client - Generate PAR request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store private_key_jwt to reuse in next call",
									"pm.environment.set(\"private_key_jwt\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{org}}-{{env}}.apigee.net/mock-adr-client/parrequest?aud={{api_endpoint}}&client_id={{client_id}}&scope=openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read&redirect_uri={{client_redirect_uri}}",
							"protocol": "https",
							"host": [
								"{{org}}-{{env}}",
								"apigee",
								"net"
							],
							"path": [
								"mock-adr-client",
								"parrequest"
							],
							"query": [
								{
									"key": "aud",
									"value": "{{api_endpoint}}"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "state",
									"value": "af0ifjsldkl",
									"disabled": true
								},
								{
									"key": "scope",
									"value": "openid%20profile%20bank:accounts.basic:read%20bank:accounts.detail:read%20bank:transactions:read"
								},
								{
									"key": "redirect_uri",
									"value": "{{client_redirect_uri}}"
								},
								{
									"key": "nonce",
									"value": "n-0S6_WzA2Mj3",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}